<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | coderberry]]></title>
  <link href="http://coderberry.me/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://coderberry.me/"/>
  <updated>2013-08-29T10:06:56-06:00</updated>
  <id>http://coderberry.me/</id>
  <author>
    <name><![CDATA[Eric Berry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS on Rails 4 - Part 2]]></title>
    <link href="http://coderberry.me/blog/2013/04/23/angularjs-on-rails-4-part-2/"/>
    <updated>2013-04-23T07:35:00-06:00</updated>
    <id>http://coderberry.me/blog/2013/04/23/angularjs-on-rails-4-part-2</id>
    <content type="html"><![CDATA[<p>Let's pick up where we left off. If you haven't already, make sure you go through <a href="/blog/2013/04/22/angularjs-on-rails-4-part-1/">Part 1</a> to create your base Rails app with the API setup.</p>

<p>You can either continue using the code you have created on part 1 or you can catch up by checking out the tagged code:</p>

<pre><code>$ git clone https://github.com/cavneb/angular_casts
$ cd angular_casts
$ git checkout step-1
$ bundle install
$ rake db:migrate; rake db:migrate RAILS_ENV=test
$ rake test
$ rake screencast_sync:railscasts
</code></pre>

<h2>Add Angular Libraries</h2>

<p>There are a couple of different ways we can add Angular into our application. <a href="http://railscasts.com/episodes/405-angularjs">Ryan Bates</a> suggests using the <a href="https://github.com/hiravgandhi/angularjs-rails">angular-rails gem</a>. Even though this is an excellent gem which is well maintained, it's good to know how to do this without a gem.</p>

<p>In our app we are going to link our scripts using a <a href="https://en.wikipedia.org/wiki/Content_delivery_network">CDN</a>. We can find the CDN for Angular at <a href="https://ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular.min.js">https://ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular.min.js</a>. We will also be adding Angular Resource via the CDN as well.</p>

<p>Update your layout file:</p>

<p>
``` html app/views/layouts/application.html.erb
&lt;!DOCTYPE html>
<html>
<head>
  <title>Angular Casts</title>
  &lt;%= stylesheet_link_tag "application", media: "all" %>
  &lt;%= csrf_meta_tags %>
</head>
<body></p>

<p>  &lt;%= yield %></p>

<p>  <script src="http://coderberry.me//ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular.min.js"></script>
  <script src="http://coderberry.me//ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular-resource.min.js"></script>
  &lt;%= javascript_include_tag "application" %>
</body>
</html>
```
</p>

<h3>Setup the Javascript Folders</h3>

<p>We want to keep our code organized by placing our Angular controllers, filters, services, directives, etc. in the app/assets/javascripts folder. Create the following directories:</p>

<ul>
<li>app/assets/javascripts/angular/controllers</li>
<li>app/assets/javascripts/angular/directives</li>
<li>app/assets/javascripts/angular/services</li>
</ul>


<p>Here's a shortcut to do this:</p>

<pre><code>$ mkdir -p app/assets/javascripts/angular/controllers \
           app/assets/javascripts/angular/directives \
           app/assets/javascripts/angular/services
</code></pre>

<p>Now let's create the main javascript file which will drive our Angular application.</p>

<p><code>coffeescript app/assets/javascripts/app.js.coffee
window.App = angular.module('AngularCasts', ['ngResource'])
</code></p>

<p>In this file we create a new module called <em>AngularCasts</em> and assign it to <code>window.App</code>. We also add the dependency of <code>ngResource</code> which provides simple REST client functionality.</p>

<p>Next, we need to update our JavaScript manifest to include our Angular scripts. The order of these is important due to the latter ones depending on the ones prior to them.</p>

<p><code>javascript app/assets/javascripts/application.js
//= require app
//= require_tree ./angular
</code></p>

<p>This is quite a change from what exists in the manifest already. We will add jQuery later, but via CDN. You'll see why later in this post.</p>

<h2>Add the View</h2>

<p>Next, we need to create a controller. This will allow us to set up a route to a view.</p>

<pre><code>$ rails g controller home index
</code></pre>

<p>This set up the <em>HomeController</em> and added the action <em>index</em>. Before we modify this view, let's update our layout to acts as an Angular app. This is done by adding the directive <code>ng-app</code> to our <code>&lt;html&gt;</code> tag:</p>

<p>
<code>html app/views/layouts/application.html.erb
&lt;!DOCTYPE html&gt;
&lt;html ng-app&gt;
...
</code>
</p>

<p>Now let's update our index view with some simple Angular code:</p>

<p>
``` html app/views/home/index.html.erb</p>

<div>
  <label>Name:</label>
  <input type="text" ng-model="yourName" placeholder="Enter a name here">
  <hr>
  <h1>Hello {{yourName}}!</h1>
</div>


<p>```
</p>

<p>Update your routes file to use this view as the root.</p>

<p>``` ruby config/routes.rb
AngularCasts::Application.routes.draw do
  scope :api do</p>

<pre><code>get "/screencasts(.:format)" =&gt; "screencasts#index"
get "/screencasts/:id(.:format)" =&gt; "screencasts#show"
</code></pre>

<p>  end
  root to: "home#index"
end
```</p>

<p><em>Note that the line <code>get 'home#index'</code> was removed. This is not needed because the root path directs to it.</em></p>

<p>Start up your server and open up <a href="http://localhost:3000">http://localhost:3000</a>. Type in your name into the text field. If the content changes as you type, it worked! You now have a functional Angular application!</p>

<p><img src="/images/posts/angular_casts_1.gif"></p>

<h6>If you are using Rails 3, you will need to delete the file <em>public/index.html</em></h6>

<h2>Now the fun begins!</h2>

<p>In order for us to tell the page that it should use the <em>App</em> module, we need to add the module name to the <code>ng-app</code> <em>directive</em>. Set the value of the attribute to <em>AngularCasts</em>:</p>

<p>``` html app/views/layouts/application.html.erb
&lt;!DOCTYPE html>
<html ng-app="AngularCasts">
<head>
  <title>Angular Casts</title>
  &lt;%= stylesheet_link_tag "application", media: "all" %>
  &lt;%= csrf_meta_tags %>
</head>
<body>
  <header></p>

<pre><code>Angular Casts
</code></pre>

<p>  </header></p>

<p>  &lt;%= yield %></p>

<p>  <script src="http://coderberry.me//ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular.min.js"></script>
  <script src="http://coderberry.me//ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular-resource.min.js"></script>
  &lt;%= javascript_include_tag "application" %>
</body>
</html>
```</p>

<p>Now our view knows to use the AngularCasts module.</p>

<h6>On lines 9-11 we have added the <code>&lt;header&gt;</code> content. Make sure you have this in your layout as well.</h6>

<h2>Create an Angular Controller</h2>

<p>Let's create a controller that will be used to list out the episodes. Create a new coffeescript file at <em>app/assets/javascripts/angular/controllers/screencasts_ctrl.js.coffee</em></p>

<p><code>coffeescript app/assets/javascripts/angular/controllers/screencasts_ctrl.js.coffee
App.controller 'ScreencastsCtrl', ['$scope', ($scope) -&gt;
  $scope.message = "Angular Rocks!"
]
</code></p>

<p>On line 1, we create a new Angular controller belonging to <em>App</em> named <em>ScreencastsCtrl</em>. The controller will be referenced in our view as <em>ScreencastsCtrl</em>. For more information on Angular controllers, read <a href="http://docs.angularjs.org/guide/dev_guide.mvc.understanding_controller">http://docs.angularjs.org/guide/dev_guide.mvc.understanding_controller</a>.</p>

<p>Let's update our view to display the message.</p>

<p>
```html app/views/home/index.html.erb</p>

<div ng-controller="ScreencastsCtrl">
  <h1>Message: {{message}}</h1>
</div>


<p>```
</p>

<p>Here we have bound the contents of the <em>div</em> to the controller <em>ScreencastsCtrl</em>. Refresh the browser and you should see 'Message: Angular Rocks!'.</p>

<h2>Make it Pretty!</h2>

<p>Lets add the much needed CSS to our application. Copy the following into <em>app/assets/stylesheets/home.css.scss</em>.</p>

<p>``` scss app/assets/stylesheets/home.css.scss
body {
  font-size: 12px;
  font-family: Helvetica, sans-serif;
  background-color: #ddd;
  margin: 0px;
}</p>

<p>header {
  background-color: #4F4F4F;
  color: #fff;
  position: absolute;
  height: 36px;
  top: 0;
  left: 0;
  right: 0;
  font-size: 18px;
  line-height: 36px;
  font-weight: bold;
  padding-left: 15px;
}</p>

<h1>screencast-ctrl {</h1>

<p>  background-color: #fff;
  position: absolute;
  top: 37px;
  width: 100%;
  bottom: 0;
  overflow: auto;
}</p>

<h1>screencast-list-container {</h1>

<p>  background-color: #fff;
  position: absolute;
  min-height: 700px;
  width: 300px;
  top: 37px;
  left: 0;
  bottom: 0;
  overflow: auto;
  -webkit-overflow-scrolling: touch;
  ul {</p>

<pre><code>margin: 0px;
list-style: none;
padding: 0px;
li {
  cursor: pointer;
  border-bottom: 1px solid #ddd;
  padding: 0 10px;
}
</code></pre>

<p>  }
  h3 {</p>

<pre><code>font-size: 14px;
small {
  font-size: 12px;
  color: #ccc;
  font-weight: normal;
}
&amp;.active {
  color: red;
}
</code></pre>

<p>  }
}</p>

<h1>screencast-view-container {</h1>

<p>  position: absolute;
  border-left: 1px solid #d0d0d0;
  top: 37px;
  left: 300px;
  right: 0;
  bottom: 0;
  background-color: #fff;
  min-height: 700px;
  padding: 5px 25px;</p>

<p>  #player {</p>

<pre><code>border: 1px solid #000;
max-width: 800px;
</code></pre>

<p>  }
}
```</p>

<p>Refresh the browser. Ooooh!</p>

<h2>Start with the Service</h2>

<p>Our Angular controller is going to access the data from our API using <a href="http://docs.angularjs.org/api/ngResource.$resource">ngResource</a>. <em>ngResource</em> enables interation with RESTful server-side data sources.</p>

<p>Angular services are singletons that carry out specific tasks common to web apps. Services are commonly used to perform the XHR interaction with the server. To learn about the differences between services and factories, <a href="http://stackoverflow.com/questions/14324451/angular-service-vs-angular-factory">read this</a>. Let's start off by creating a service at <em>screencast.js.coffee</em>:</p>

<p><code>coffeescript app/assets/javascripts/angular/services/screencast.js.coffee
App.factory 'Screencast', ['$resource', ($resource) -&gt;
  $resource '/api/screencasts/:id', id: '@id'
]
</code></p>

<p>Now tell the controller to use this service:</p>

<p><code>coffeescript app/assets/javascripts/controllers/screencasts_ctrl.js.coffee
App.controller 'ScreencastsCtrl', ['$scope', 'Screencast', ($scope, Screencast) -&gt;
  $scope.screencasts = Screencast.query()
]
</code></p>

<p>Update the index view with the following:</p>

<p>
```html app/views/home/index.html.erb</p>

<div ng-controller="ScreencastsCtrl">
  <div id="screencast-list-container">
    <ul>
      <li ng-repeat="screencast in screencasts">
        <h3>{{screencast.title}} <small>({{screencast.duration}})</small></h3>
      </li>
    </ul>
  </div>
</div>


<p>```
</p>

<p>Now refresh the page. If all worked well, you should see a list of screencasts on the left side. When we reloaded the page, a <em>GET</em> request was sent to <em>/api/screencasts</em>, populating the <em>screencasts</em> attribute in our scope. This is the power of Angular ngResource.</p>

<h2>Now What?</h2>

<p>We are doing great! Now we have a list of screencasts on the side which are clickable. However, we don't do anything when they are clicked. What we want to do is show the screencast in the main section along with some additional screencast information.</p>

<p>Start off by adding the HTML code which will be used to display the main content. This is done inside the <em>index.html.erb</em> file:</p>

<p>
```html app/views/home/index.html.erb</p>

<div ng-controller="ScreencastsCtrl">
  <div id="screencast-list-container">
    <ul>
      <li ng-repeat="screencast in screencasts">
        <h3>{{screencast.title}} <small>({{screencast.duration}})</small></h3>
      </li>
    </ul>
  </div>

  <div id="screencast-view-container" ng-show="selectedScreencast">
    <h2>{{selectedScreencast.title}}</h2>
    <p>{{selectedScreencast.summary}}</p>
    <p>
      Published at {{selectedScreencast.published_at | date: 'mediumDate'}} 
      - <a ng-href="{{selectedScreencast.link}}">{{selectedScreencast.link}}</a>
    </p>
  </div>
</div>


<p>```
</p>

<p>On lines 10-17, we have added a div which shows the screencast title and summary. On line 10, we use the <a href="http://docs.angularjs.org/api/ng.directive:ngShow">ng-show</a> directive which only displays the div if <em>selectedScreencast</em> exists.</p>

<p>Go ahead and refresh the page. You should not see any changes. Click on a screencast. Still no changes.</p>

<h3>Click and Show</h3>

<p>In order for us to show the main content with the screencast information, we need to do a few things. The first thing we need to do is add an <a href="http://docs.angularjs.org/api/ng.directive:ngClick">ng-click</a> directive to our screencast list:</p>

<p>
```html app/views/home/index.html.erb
...
  <div id="screencast-list-container" ></p>

<pre><code>&lt;ul&gt;
  &lt;li ng-repeat="screencast in screencasts"
      ng-click="showScreencast(screencast)"&gt;
    &lt;h3&gt;{{screencast.title}} &lt;small&gt;({{screencast.duration}})&lt;/small&gt;&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>  </div>
...
```
</p>

<p>Now when the list item is clicked the function <em>showScreencast</em> will be triggered with the screencast being passed in to it. Now let's update our controller with this function:</p>

<p>```coffeescript app/assets/javascripts/angular/controllers/screencasts_ctrl.js.coffee
App.controller 'ScreencastsCtrl', ['$scope', 'Screencast', ($scope, Screencast) ->
  # Attributes accessible on the view
  $scope.screencasts        = Screencast.query()
  $scope.selectedScreencast = null</p>

<p>  # Set the selected screencast to the one which was clicked
  $scope.showScreencast = (screencast) -></p>

<pre><code>$scope.selectedScreencast = screencast
</code></pre>

<p>]
```</p>

<p>Refresh your browser and click on a screencast. As my wife would incorrectly say: <strong>"Waalah!"</strong></p>

<h2>Show the Screencast</h2>

<p>After doing a bit of looking around, I found that <a href="http://flowplayer.org">Flow Player</a> offered the easiest and cleanest way to show videos. Let's add the dependent scripts and css links to our layout:</p>

<p>``` html app/views/layouts/application.html.erb
&lt;!DOCTYPE html>
<html ng-app="AngularCasts">
<head>
  <title>Angular Casts</title>
  <link href="http://coderberry.me//releases.flowplayer.org/5.4.0/skin/minimalist.css" rel="stylesheet">
  &lt;%= stylesheet_link_tag "application", media: "all" %>
  &lt;%= csrf_meta_tags %>
</head>
<body>
  <header></p>

<pre><code>Angular Casts
</code></pre>

<p>  </header></p>

<p>  &lt;%= yield %></p>

<p>  <script src="http://coderberry.me//ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js"></script>
  <script src="http://coderberry.me//releases.flowplayer.org/5.4.0/flowplayer.min.js"></script>
  <script src="http://coderberry.me//ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular.min.js"></script>
  <script src="http://coderberry.me//ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular-resource.min.js"></script>
  &lt;%= javascript_include_tag "application" %>
</body>
</html>
```</p>

<p>Remember how we removed jQuery from our Gemfile and javascript manifest? The reason is because we didn't want it concatenated with the other scripts. FlowPlayer depends on jQuery and so jQuery needs to be available prior to Flow Player being loaded. We also can load it via CDN. Good times for all.</p>

<h3>Create the FlowPlayer Directive</h3>

<p>FlowPlayer requires triggering a function <em>flowplayer()</em> to show the video. We could add this into our controller, but we love to learn. Let's create a directive which listens to the controller and triggers the <em>flowplayer</em> function when <em>showScreencast</em> is called.</p>

<p>Create the directive at <em>app/assets/javascripts/angular/directives/flow_player.js.coffee</em></p>

<p>``` coffeescript app/assets/javascripts/angular/directives/flow_player.js.coffee
App.directive 'flowPlayer', ->
  (scope, element, attrs) -></p>

<pre><code># Trigger when the selectedScreencast function is called
# with a screencast
scope.$watch 'selectedScreencast', (screencast) -&gt;
  if screencast

    # See http://flowplayer.org/docs/
    element.flowplayer
      playlist: [[mp4: screencast.video_url]]
      ratio: 9 / 14
</code></pre>

<p>```</p>

<p>Now add the directive into our view:</p>

<p>
```html app/views/home/index.html.erb
...
  <div id="screencast-view-container" ng-show="selectedScreencast"></p>

<pre><code>&lt;h2&gt;{{selectedScreencast.title}}&lt;/h2&gt;
&lt;p&gt;{{selectedScreencast.summary}}&lt;/p&gt;
&lt;div flow-player="" id="player"&gt;&lt;/div&gt;
&lt;p&gt;
  Published at {{selectedScreencast.published_at | date: 'mediumDate'}} 
  - &lt;a ng-href="{{selectedScreencast.link}}"&gt;{{selectedScreencast.link}}&lt;/a&gt;
&lt;/p&gt;
</code></pre>

<p>  </div>
...
```
</p>

<p>Refresh your browser and go nuts!</p>

<h2>Extra Goodies</h2>

<p>One final thing that I would like to see is some sort of indicator which lets us know which video is playing on the screencast list. This can be done via CSS and some simple code.</p>

<p>In our CSS file, we have already added some style for an active screencast. Any <em>H3</em> tag on the side with the class of <em>active</em> will show as red. Try it out by adding the class to our view:</p>

<p>
```html app/views/home/index.html.erb
...
  <div id="screencast-list-container" ></p>

<pre><code>&lt;ul&gt;
  &lt;li ng-repeat="screencast in screencasts"
      ng-click="showScreencast(screencast)"&gt;
    &lt;h3 class="active"&gt;{{screencast.title}} &lt;small&gt;({{screencast.duration}})&lt;/small&gt;&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>  </div>
...
```
</p>

<p>Refresh the page. You should now see that every screencast link on the left is red.</p>

<p>For us to make it show for the active screencast only we have to make a few changes to our view and controller. Update the view to use the <a href="http://docs.angularjs.org/api/ng.directive:ngClass">ng-class</a> directive:</p>

<p> 
```html app/views/home/index.html.erb
...
  <div id="screencast-list-container" ></p>

<pre><code>&lt;ul&gt;
  &lt;li ng-repeat="screencast in screencasts"
      ng-click="showScreencast(screencast, $index)"&gt;
    &lt;h3 ng-class="{active: $index == selectedRow}"&gt;{{screencast.title}} 
      &lt;small&gt;({{screencast.duration}})&lt;/small&gt;&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>  </div>
...
```
</p>

<p>Note that on line 5 we added the 2nd attribute <em>&amp;index</em>. This is available via the <em>ng-repeat</em> directive and is the index value of the array (integer). We also modified line 6 to use the <em>ng-class</em> directive which only shows "active" if the <em>$index</em> is equal to <em>$scope.selectedRow</em>.</p>

<p>Now update the controller to work with these changes:</p>

<p>``` coffeescript app/assets/javascripts/controllers/screencasts_ctrl.js.coffee
App.controller 'ScreencastsCtrl', ['$scope', 'Screencast', ($scope, Screencast) ->
  # Attributes accessible on the view
  $scope.selectedScreencast = null
  $scope.selectedRow        = null</p>

<p>  # Gather the screencasts and set the selected one to the first on success
  $scope.screencasts = Screencast.query -></p>

<pre><code>$scope.selectedScreencast = $scope.screencasts[0]
$scope.selectedRow = 0
</code></pre>

<p>  # Set the selected screencast to the one which was clicked
  $scope.showScreencast = (screencast, row) -></p>

<pre><code>$scope.selectedScreencast = screencast
$scope.selectedRow = row
</code></pre>

<p>]
```</p>

<p>We have added the new param <em>row</em> to the <em>showScreencast</em> function and set this to <em>$scope.selectedRow</em>. Refresh your browser and see how things have changed.</p>

<h2>Completed Project</h2>

<p>View the working app at <a href="http://angular-casts.herokuapp.com/">http://angular-casts.herokuapp.com/</a>.</p>

<h2>Final Thoughts</h2>

<p>I know there are no front-end tests for this tutorial. This was intentional. They were too hard. I spent hours upon hours trying to get the tests working with <em>$httpBackend</em> and service testing, etc. I tried <em>karma</em> and <em>testem</em>. Too much time. Too little benefit. If you are better at this stuff than I am please send me an email or pull request or something with the changes you've made to include the tests. I can always add a <em>Part 3</em> which is about nothing other than testing the frontend.</p>

<p>Thank you all who have patiently waited for me to finish this post. I learned never to release a post before it has been proofread and run through several times. Next time I'm going to do a screencast.. just like the <a href="http://www.teachmetocode.com">old days</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS on Rails 4 - Part 1]]></title>
    <link href="http://coderberry.me/blog/2013/04/22/angularjs-on-rails-4-part-1/"/>
    <updated>2013-04-22T22:28:00-06:00</updated>
    <id>http://coderberry.me/blog/2013/04/22/angularjs-on-rails-4-part-1</id>
    <content type="html"><![CDATA[<div style="width: 242px;
      height: 388px;
      margin: 10px 30px 10px 0;
      float: left;
      background: transparent url(http://f.cl.ly/items/1n0f2g2z2w2U0s2h2t40/angular_mug.jpg) -60px -80px no-repeat;">
</div>


<p>Angular seems to be the big craze as of late. Some may agree and some may not, but AngularJS is one of the next big contenders for being the number one choice of developers. At the time of writing this article, AngularJS is the <a href="https://github.com/languages/JavaScript/most_watched">12th most watched project on GitHub</a>.</p>

<p>Here I want to create a useful Rails application using Angular. The goal is to have a single-page application which allows us to select a screencast link on the left and view it on the right. An example of this would be found at <a href="http://ember101.com">http://ember101.com</a>.</p>

<h6>Originally I had presented this topic at our local <a href="http://utruby.org">ruby users group</a>. My typical workflow is to write a blog post before presenting and have that post be a reference to my presentation. Since then, I have received a lot of feedback on how I could have enhanced the app. These posts (part 1 and 2) been re-written to reflect those changes. <em>Special thanks goes to <a href="http://tadthorley.com/">Tad Thorley</a> for providing the <a href="https://github.com/phaedryx/angularcast-example">excellent example application</a> based off of the original. Also thanks goes out to those who have commented on these posts.</em></h6>

<div style="clear: both;"></div>


<h2>Creating the Rails Application</h2>

<p>I had a hard time deciding when I began this project on whether to use a full Rails application or a very lightweight ruby web stack like <a href="http://sinatrarb.com">Sinatra</a>. I also experimented with a middle-ground solution called <a href="https://github.com/rails-api/rails-api">Rails::API</a> (see <a href="http://railscasts.com/episodes/348-the-rails-api-gem">Railscast</a>). In the end, I used standard Rails (version 4.0.0.rc1). This gave me the flexibility I want; and for the scope of this tutorial I didn't want to distract from learning how to use Angular in an Rails application.</p>

<p>Before anything, we need to create a new Rails application called <em>Angular Casts</em></p>

<pre><code>$ rails new angular_casts
...
$ cd angular_casts
</code></pre>

<h2>Creating the Model and Controller</h2>

<p>Our application will be pretty simple. We are only going to worry about storing screencast information in our database. Rails by default comes with a very lightweight database server called SQLite. If you aren't familiar with this, you can visit <a href="http://guides.rubyonrails.org/getting_started.html#configuring-a-database">http://guides.rubyonrails.org/getting_started.html#configuring-a-database</a> to learn more.</p>

<p>Before we create our model, we need to determine what information we want to store. As a user of this application, I think the most useful would be:</p>

<ul>
<li><em>title</em>: What is the name of the screencast?</li>
<li><em>summary</em>: What is the screencast about?</li>
<li><em>duration</em>: How long is the screencast?</li>
<li><em>link</em>: How do I get to the original screencast?</li>
<li><em>published</em>: When was the screencast published?</li>
<li><em>source</em>: Who is the provider of the screencast?</li>
</ul>


<p>Let's create a model and controller based on this information. We need to add the <em>video_url</em> field as well, which will be used to embed the video into our app.</p>

<pre><code>$ rails g resource screencast title summary:text duration link published_at:datetime source video_url
</code></pre>

<p>By running the <em>resource</em> generator, we now have a model and a controller. The controller will provide our REST API. We also can see that the <em>screencasts</em> resources have been added to our routes:</p>

<p><code>ruby config/routes.rb
AngularCasts::Application.routes.draw do
  resources :screencasts
  ...
end
</code></p>

<p>Run the migration tasks for both development and test environments:</p>

<pre><code>$ rake db:migrate; rake db:migrate RAILS_ENV=test
</code></pre>

<h2>Testing the Model</h2>

<h6>Testing is not the primary topic of these blog posts, so less time and explanation will be given to them. If you want to learn more about testing, I recommend <a href="http://railscasts.com/episodes/275-how-i-test">http://railscasts.com/episodes/275-how-i-test</a>.</h6>

<p>For us to have a long-lasting, maintainable application it is imperative that we keep our code tested. This will also help us stay focused on what our application and code is supposed to do.</p>

<p>Start by running the rake task for testing to see make sure the tests run:</p>

<pre><code>$ rake test
</code></pre>

<p>If all worked well, you should see something like <strong>0 tests, 0 assertions, 0 failures, 0 errors, 0 skips</strong>. This means that the test suite ran, but it didn't find any tests to run.</p>

<p>There are a couple of things we will want to test:</p>

<ul>
<li>Make sure that all the required data exists for each screencast.</li>
<li>Make sure that we do not have two of the same screencast (duplicates).</li>
</ul>


<p>Before we write our tests, let's update our fixtures file with some testable data:</p>

<p>``` yaml test/fixtures/screencasts.yml</p>

<h1>Read about fixtures at http://api.rubyonrails.org/classes/ActiveRecord/Fixtures.html</h1>

<p>fast_rails_commands:
  title: "Fast Rails Commands"
  summary: "Rails commands, such as generators, migrations, and tests, have a tendency to be slow because they need to load the Rails app each time. Here I show three tools to make this faster: Zeus, Spring, and Commands."
  duration: "8:06"
  link: "http://railscasts.com/episodes/412-fast-rails-commands"
  published_at: "Thu, 04 Apr 2013 00:00:00 -0700"
  source: "railscasts"
  video_url: "http://media.railscasts.com/assets/episodes/videos/412-fast-rails-commands.mp4"</p>

<p>wizard_forms_with_wicked:
  title: "Wizard Forms with Wicked"
  summary: "Creating a wizard form can be tricky in Rails. Learn how Wicked can help by turning a controller into a series of multiple steps."
  duration: "11:57"
  link: "http://railscasts.com/episodes/346-wizard-forms-with-wicked"
  published_at: "Thu, 03 May 2012 00:00:00 -0700"
  source: "railscasts"
  video_url: "http://media.railscasts.com/assets/episodes/videos/346-wizard-forms-with-wicked.mp4"</p>

<p>sending_html_emails:
  title: "Sending HTML Email"
  summary: "HTML email can be difficult to code because any CSS should be made inline. Here I present a few tools for doing this including the premailer-rails3 and roadie gems."
  duration: "5:42"
  link: "http://railscasts.com/episodes/312-sending-html-email"
  published_at: "Mon, 02 Jan 2012 00:00:00 -0800"
  source: "railscasts"
  video_url: "http://media.railscasts.com/assets/episodes/videos/312-sending-html-email.mp4"
```</p>

<p>Open up the auto-generated file <em>test/models/screencast_test.rb</em> and add the following tests. If you are using Rails 3.x, the test file will appear under <em>test/unit/screencast_test.rb.</em></p>

<p>``` ruby test/models/screencast_test.rb
require 'test_helper'</p>

<p>class ScreencastTest &lt; ActiveSupport::TestCase
  setup do</p>

<pre><code>@screencast_defaults = {
  title:        'Facebook Authentication',
  summary:      'This will show how to create a new facebook application and configure it. Then add some authentication with the omniauth-facebook gem and top it off with a client-side authentication using the JavaScript SDK.',
  duration:     '12:09',
  link:         'http://railscasts.com/episodes/360-facebook-authentication',
  published_at: Date.parse('Mon, 25 Jun 2012 00:00:00 -0700'),
  source:       'railscasts',
  video_url:    'http://media.railscasts.com/assets/episodes/videos/360-facebook-authentication.mp4'
}
</code></pre>

<p>  end</p>

<p>  test "should be invalid if missing required data" do</p>

<pre><code>screencast = Screencast.new
assert !screencast.valid?
[:title, :summary, :duration, :link, :published_at, :source, :video_url].each do |field_name|
  assert screencast.errors.keys.include? field_name
end
</code></pre>

<p>  end</p>

<p>  test "should be valid if required data exists" do</p>

<pre><code>screencast = Screencast.new(@screencast_defaults)
assert screencast.valid?
</code></pre>

<p>  end</p>

<p>  test "should only allow one screencast with the same video url" do</p>

<pre><code>screencast = Screencast.new(@screencast_defaults)
screencast.video_url = screencasts(:fast_rails_commands).video_url
assert !screencast.valid?
assert screencast.errors[:video_url].include? "has already been taken"
</code></pre>

<p>  end
end
```</p>

<p>Once this is in place, run the tests again with the command <code>rake test</code>.</p>

<p>``` bash
$ rake test
Run options: --seed 29768</p>

<h1>Running tests:</h1>

<p>F.F</p>

<p>Finished tests in 0.048601s, 61.7271 tests/s, 61.7271 assertions/s.</p>

<p>  1) Failure:
ScreencastTest#test_should_be_invalid_if_missing_required_data [../angular_casts/test/models/screencast_test.rb:18]:
Failed assertion, no message given.</p>

<p>  2) Failure:
ScreencastTest#test_should_only_allow_one_screencast_with_the_same_video_url [../angular_casts/test/models/screencast_test.rb:32]:
Failed assertion, no message given.</p>

<p>3 tests, 3 assertions, 2 failures, 0 errors, 0 skips
```</p>

<p>You can see we have have 3 tests with 3 assertions and 2 failures. The reason we didn't get 3 failures is because the second test, "should be valid if required data exists", will always pass until we set up some restrictions on the model.</p>

<p>Let's update the model to make these tests pass.</p>

<p><code>ruby app/models/screencast.rb
class Screencast &lt; ActiveRecord::Base
  validates_presence_of :title, :summary, :duration, :link, :published_at, :source, :video_url
  validates_uniqueness_of :video_url
end
</code></p>

<p>Run the tests again to see them pass successfully!</p>

<h2>Importing the Video Data</h2>

<p>Because we are going to import video feeds from external sites, we need to use a feed parsing library. The best one available is <a href="https://github.com/pauldix/feedzirra">feedzirra</a>. Let's add it to our Gemfile and remove <em>turbolinks</em>, <em>jbuilder</em> and <em>sdoc</em>. We also remove <em>jquery-rails</em> because we will use it via <a href="https://en.wikipedia.org/wiki/Content_delivery_network">CDN</a> instead of inside the Asset Pipeline. This will be further explained in part 2.</p>

<p>``` ruby Gemfile
source 'https://rubygems.org'</p>

<p>gem 'rails',        '4.0.0.rc1'
gem 'sqlite3'
gem 'sass-rails',   '~> 4.0.0.rc1'
gem 'uglifier',     '>= 1.3.0'
gem 'coffee-rails', '~> 4.0.0'
gem 'feedzirra'
```</p>

<p>Now install the gems:</p>

<pre><code>$ bundle install
</code></pre>

<h3>Create an Import Library</h3>

<p>Now that we have a place to put all of the screencast information, we need to be able to import it from external feeds. Here we are going to create a simple Ruby class that uses the <em>feedzirra</em> gem to grab the feed data, parse it and then add it to our database.</p>

<p>Let's start off by creating a new class called <em>ScreencastImporter</em>. Paste the following code into <em>lib/screencast_importer.rb</em>.</p>

<p>``` ruby lib/screencast_importer.rb
require 'feedzirra'</p>

<p>class ScreencastImporter
  def self.import_railscasts</p>

<pre><code># because the Railscasts feed is targeted at itunes, there is additional metadata that
# is not collected by Feedzirra by default. By using add_common_feed_entry_element,
# we can let Feedzirra know how to map those values. See more information at
# http://www.ruby-doc.org/gems/docs/f/feedzirra-0.1.2/Feedzirra/Feed.html
Feedzirra::Feed.add_common_feed_entry_element(:enclosure, :value =&gt; :url, :as =&gt; :video_url)
Feedzirra::Feed.add_common_feed_entry_element('itunes:duration', :as =&gt; :duration)

# Capture the feed and iterate over each entry
feed = Feedzirra::Feed.fetch_and_parse("http://feeds.feedburner.com/railscasts")
feed.entries.each do |entry|

  # Strip out the episode number from the title
  title = entry.title.gsub(/^#\d+\s/, '')

  # Find or create the screencast data into our database
  Screencast.where(video_url: entry.video_url).first_or_create(
    title:        title,
    summary:      entry.summary,
    duration:     entry.duration,
    link:         entry.url,
    published_at: entry.published,
    source:       'railscasts' # set this manually
  )
end

# Return the number of total screencasts for the source
Screencast.where(source: 'railscasts').count
</code></pre>

<p>  end
end
```</p>

<p>Note that on lines 17-18, we strip out the episode number from the Railscast title. So "#412 Fast Rails Commands" would become "Fast Rails Commands". See <a href="http://rubular.com/r/duWf3x2mSp">this Rubular</a> to see how I determined the RegExp pattern.</p>

<p>Now if we were to go into our Rails console, we could trigger this import manually. Give it a shot!</p>

<pre><code>$ rails c
Loading development environment (Rails 4.0.0.rc1)

&gt;&gt; require 'screencast_importer'
=&gt; true

&gt;&gt; ScreencastImporter.import_railscasts
.... lots ... of ... feedback ....
=&gt; 345

&gt;&gt; Screencast.count
=&gt; 345
</code></pre>

<h6>At the time of writing this article, there were 345 public Railscasts. This number will increase as time goes on.</h6>

<h3>Trigger Import via Rake</h3>

<p>Instead of loading up the Rails console and performing the import manually, it would me much easier to have a simple command that we could run to perform the imports. This is where <a href="http://rake.rubyforge.org/">rake tasks</a> come in. Let's create a rake task that will perform the import.</p>

<p>``` ruby lib/tasks/screencast_sync.rake
require 'screencast_importer'</p>

<p>namespace :screencast_sync do
  desc 'sync all missing screencasts from Railscasts.com'
  task :railscasts => :environment do</p>

<pre><code>total = ScreencastImporter.import_railscasts
puts "There are now #{total} screencasts from Railscasts.com"
</code></pre>

<p>  end
end
```</p>

<p>Now that we have our rake task set up, go ahead and run the command:</p>

<pre><code>$ rake screencast_sync:railscasts
There are now 345 screencasts from Railscasts.com
</code></pre>

<p>It worked! But no time to celebrate.. let's move on.</p>

<h2>Making Episodes Accessible via API</h2>

<p>Because we are planning on using Angular for our front-end, we only need to expose our data as JSON. This will allow Angular to talk to the backend via ajax calls.</p>

<p>We are going to only use two calls to the API:</p>

<ul>
<li><strong>/screencasts.json</strong> - returns a full list of episodes</li>
<li><strong>/screencasts/ID.json</strong> - returns data for a specified screencast (where ID is the unique ID of the screencast in our db)</li>
</ul>


<p>Because we used the <em>resource</em> generator, we already have our controller and routes.</p>

<p>Let's do some cleanup to the routes and make sure we only are allowing what we want to use. On top of that, let's <a href="http://guides.rubyonrails.org/routing.html#controller-namespaces-and-routing">scope</a> our calls to the API with <em>api</em>.</p>

<p>``` ruby config/routes.rb
AngularCasts::Application.routes.draw do
  scope :api do</p>

<pre><code>get "/screencasts(.:format)" =&gt; "screencasts#index"
get "/screencasts/:id(.:format)" =&gt; "screencasts#show"
</code></pre>

<p>  end
end
```</p>

<p>Run the command <code>rake routes</code> to see our changes.</p>

<pre><code>$ rake routes
Prefix Verb URI Pattern                    Controller#Action
 GET /api/screencasts(.:format)     screencasts#index
 GET /api/screencasts/:id(.:format) screencasts#show
</code></pre>

<p>Now update the controller to render the correct JSON data for the two URL's.</p>

<p>``` ruby app/controllers/screencast_controller.rb
class ScreencastsController &lt; ApplicationController
  # GET /screencasts
  # GET /screencasts.json
  def index</p>

<pre><code>render json: Screencast.all
</code></pre>

<p>  end</p>

<p>  # GET /screencasts/:id
  # GET /screencasts/:id.json
  def show</p>

<pre><code>render json: Screencast.find(params[:id])
</code></pre>

<p>  end
end
```</p>

<p>Now start up your Rails application and visit this link: <a href="http://localhost:3000/api/screencasts.json">http://localhost:3000/api/screencasts.json</a>. If all went well, you should see JSON data. You should also be able to view <a href="http://localhost:3000/api/screencasts/1.json">http://localhost:3000/api/screencasts/1.json</a> and see the data belonging to a single screencast.</p>

<p><code>javascript http://localhost:3000/api/screencasts/1.json
{
  "id": 1,
  "title": "Upgrading to Rails 4",
  "summary": "With the release of Rails 4.0.0.rc1 it's time to try it out and report any bugs. Here I walk you through the steps to upgrade a Rails 3.2 application to Rails 4.",
  "duration": "12:44",
  "link": "http://railscasts.com/episodes/415-upgrading-to-rails-4",
  "published_at": "2013-05-06T07:00:00.000Z",
  "source": "railscasts",
  "video_url": "http://media.railscasts.com/assets/episodes/videos/415-upgrading-to-rails-4.mp4",
  "created_at": "2013-05-21T18:22:29.719Z",
  "updated_at": "2013-05-21T18:22:29.719Z"
}
</code></p>

<h2>Testing the API</h2>

<p>Of course we are going to test the API! It actually isn't as complicated as it may seem. I am not going to go over much explanation beyond the inline comments.</p>

<p>Create a new integration test at <em>test/integration/api_screencasts_test.rb</em>.</p>

<p>``` ruby test/integration/api_screencasts_test.rb
require 'test_helper'</p>

<p>class ApiScreencastsTest &lt; ActionDispatch::IntegrationTest
  test "get /api/screencasts.json" do</p>

<pre><code>get "/api/screencasts.json"
assert_response :success
assert body == Screencast.all.to_json
screencasts = JSON.parse(response.body)
assert screencasts.size == 3 # because there are three fixtures (see screencasts.yml)
assert screencasts.any? { |s| s["title"] == screencasts(:fast_rails_commands).title }
</code></pre>

<p>  end</p>

<p>  test "get /api/screencasts/:id" do</p>

<pre><code>screencast = screencasts(:fast_rails_commands)
get "/api/screencasts/#{screencast.id}.json"
assert_response :success
assert body == screencast.to_json
assert JSON.parse(response.body)["title"] == screencast.title
</code></pre>

<p>  end
end
```</p>

<p>Go ahead and run your tests:</p>

<pre><code>$ rake test
...
5 tests, 18 assertions, 0 failures, 0 errors, 0 skips
</code></pre>

<p>Looks like our test are passing.</p>

<hr />

<p>Let's stop for now. Our next steps will be getting our hands dirty with AngularJS.</p>

<h4>Go to <a href="/blog/2013/04/23/angularjs-on-rails-4-part-2/">Part 2</a></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrapping AngularJS with Yeoman]]></title>
    <link href="http://coderberry.me/blog/2013/02/13/bootstrapping-angularjs-with-yeoman/"/>
    <updated>2013-02-13T16:13:00-07:00</updated>
    <id>http://coderberry.me/blog/2013/02/13/bootstrapping-angularjs-with-yeoman</id>
    <content type="html"><![CDATA[<div style="width: 242px;
      height: 388px;
      margin: 10px 30px 10px 0;
      float: left;
      background: transparent url(/images/posts/angular-yeoman.png) top left no-repeat;">
</div>


<p><strong><a href="http://angularjs.org/">AngularJS</a> is awesome.</strong></p>

<p>If you are here, you already know that. If not, <a href="http://www.youtube.com/user/angularjs">watch these videos</a>.</p>

<p><strong><a href="http://yeoman.io">Yeoman</a> is awesome.</strong></p>

<p>If you are here, you <em>might</em> not know that already. It is similar to <a href="http://middlemanapp.com">middleman</a> but is Node driven instead of ruby. For a kickstart, watch the <a href="http://www.youtube.com/watch?feature=player_embedded&amp;v=vFacaBinGZ0">screencast by Addi Osmani</a>.</p>

<p>Yeoman also provides support for easy scaffolding, auto-compilation of CoffeeScript and Compass, live preview servers and more. Yup, I was just listing some of the features from <a href="http://yeoman.io/">their site</a>.</p>

<p>Combine these together and you have an excellent solution to bootstrapping your AngularJS applications.</p>

<h2>Install Yeoman</h2>

<p>Install Yeoman with the following command:</p>

<pre><code>$ curl -L get.yeoman.io | bash
</code></pre>

<p>Once this is done, you can confirm the install and version:</p>

<pre><code>$ yeoman --version
yeoman  v0.9.1
</code></pre>

<h2>AngularJS Generators</h2>

<p>The generators that Yeoman provides for AngularJS can be found on <a href="https://github.com/yeoman/generator-angular">GitHub</a>. To view the available generators, type <code>$ yeoman init --help</code>. Here are the Angular related generators</p>

<h4>angular:controller</h4>

<pre><code>Usage:
  yeoman init angular:controller NAME [options]

Options:
  -h, --help  # Print generator's options and usage  
              # Default: false

Description:
    Creates a new Angular controller

Example:
    yeoman init angular:controller Thing

    This will create:
        app/scripts/controllers/thing-ctrl.js
</code></pre>

<h4>angular:filter</h4>

<pre><code>Usage:
  yeoman init angular:filter NAME [options]

Options:
  -h, --help  # Print generator's options and usage  
              # Default: false

Description:
    Creates a new AngularJS filter

Example:
    yeoman init angular:filter thing

    This will create:
        app/scripts/filters/thing.js
</code></pre>

<h4>angular:route</h4>

<pre><code>Usage:
  yeoman init angular:route NAME [options]

Options:
  -h, --help                # Print generator's options and usage  
                            # Default: false
      --angular:controller  # Angular:controller to be invoked     
                            # Default: 
      --angular:view        # Angular:view to be invoked           
                            # Default: 

Description:
    Creates a new AngularJS route

Example:
    yeoman init angular:route thing

    This will create:
        app/scripts/controllers/thing.js
        app/views/thing.html
    And add routing to:
        app.js
</code></pre>

<h4>angular:service</h4>

<pre><code>Usage:
  yeoman init angular:service NAME [type] [options]

Options:
  -h, --help  # Print generator's options and usage  
              # Default: false

Description:
    Creates a new AngularJS service.
    Docs: http://docs.angularjs.org/guide/dev_guide.services.creating_services

Example:
    yeoman init angular:service thing

    This will create:
        app/scripts/services/thing.js
</code></pre>

<h4>angular:view</h4>

<pre><code>Usage:
  yeoman init angular:view NAME [options]

Options:
  -h, --help  # Print generator's options and usage  
              # Default: false

Description:
    Creates a new AngularJS view

Example:
    yeoman init angular:view Thing

    This will create:
        app/scripts/views/thing.html
</code></pre>

<h4>angular:directive</h4>

<pre><code>Usage:
  yeoman init angular:directive NAME [options]

Options:
  -h, --help  # Print generator's options and usage  
              # Default: false

Description:
    Creates a new Angular directive

Example:
    yeoman init angular:directive thing

    This will create:
        app/scripts/directives/thing.js
</code></pre>

<h4>angular:app</h4>

<pre><code>Usage:
  yeoman init angular:app [options]

Options:
  -h, --help  # Print generator's options and usage  
              # Default: false  

Description:
    Create a base Angular application

Example:
    yeoman init angular:app

    This will create:
        app/.htaccess
        app/404.html
        app/favicon.ico
        app/robots.txt
        app/scripts/vendor/angular.js
        app/scripts/vendor/angular.min.js
        app/styles/main.css
        app/views/main.html
        Gruntfile.js
        package.json
        test/lib/angular-mocks.js
        app/scripts/thing.js
        app/index.html
</code></pre>

<h4>angular:all</h4>

<pre><code>Usage:
  yeoman init angular:all [options]

Options:
  -h, --help                # Print generator's options and usage  
                            # Default: false
      --angular:app         # Angular:app to be invoked            
                            # Default: 
      --angular:controller  # Angular:controller to be invoked     
                            # Default: 
      --testacular:app      # Testacular:app to be invoked         
                            # Default: 

Description:
    Creates a complete starter Angular application with a main 
    controller, view and tests

Example:
    yeoman init angular

    This will create:
        app/.htaccess
        app/404.html
        app/favicon.ico
        app/robots.txt
        app/scripts/vendor/angular.js
        app/scripts/vendor/angular.min.js
        app/styles/main.css
        app/views/main.html
        Gruntfile.js
        package.json
        test/lib/angular-mocks.js
        app/scripts/thing.js
        app/index.html
        app/scripts/controllers/main.js
        test/spec/controllers/main.js
        testacular.conf.js
</code></pre>

<h2>Bootstrap your app</h2>

<div style="width: 170px;
      height: 200px;
      margin: 10px 0 10px 30px;
      float: right;
      background: transparent url(/images/posts/instant-gratification.png) top left no-repeat;">
</div>


<p>The first thing that must be done is create a base folder for the application.</p>

<pre><code>$ mkdir my_app
$ cd my_app/
</code></pre>

<p>Now run the <strong>angular:all</strong> generator:</p>

<pre><code>$ yeoman init angular:all
</code></pre>

<p>Finally, start up your server by running</p>

<pre><code>$ yeoman server
</code></pre>

<p>Now when you make code changes, it will update live to the app.</p>

<h2>TBD</h2>

<ul>
<li>Enhance the documentation listed above.</li>
<li>Show how to use the yo CLI tool</li>
<li>Use yeoman to create CoffeeScript instead of JavaScript</li>
</ul>

]]></content>
  </entry>
  
</feed>
