<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | coderberry]]></title>
  <link href="http://coderberry.me/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://coderberry.me/"/>
  <updated>2013-04-23T17:39:23-06:00</updated>
  <id>http://coderberry.me/</id>
  <author>
    <name><![CDATA[Eric Berry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS on Rails 4 - Part 2]]></title>
    <link href="http://coderberry.me/blog/2013/04/23/angularjs-on-rails-4-part-2/"/>
    <updated>2013-04-23T07:35:00-06:00</updated>
    <id>http://coderberry.me/blog/2013/04/23/angularjs-on-rails-4-part-2</id>
    <content type="html"><![CDATA[<p>Let's pick up where we left off. If you haven't already, make sure you go through <a href="/blog/2013/04/22/angularjs-on-rails-4-part-1/">Part 1</a> to create your base Rails app with the API setup.</p>

<p>You can either continue using the code you have created on part 1 or you can catch up by checking out the tagged code:</p>

<pre><code>$ git clone https://github.com/cavneb/angular_casts
$ cd angular_casts
$ git checkout 'step-2'
$ bundle install
$ rake db:migrate
</code></pre>

<h2>Add AngularJS Libraries</h2>

<p>There are a couple of different ways we can add AngularJS into our application. <a href="http://railscasts.com/episodes/405-angularjs">Ryan Bates</a> suggests using the <a href="https://github.com/hiravgandhi/angularjs-rails">angular-rails gem</a>. I found this to be a bit outdated and overkill for what we are trying to do. Not only that, it's good to know how to do this without a gem.</p>

<p>Go to <a href="http://code.angularjs.org/1.0.6/">http://code.angularjs.org/1.0.6/</a> and download the following files into your vendor/assets/javascripts folder:</p>

<ul>
<li><a href="http://code.angularjs.org/1.0.6/angular.js">http://code.angularjs.org/1.0.6/angular.js</a></li>
<li><a href="http://code.angularjs.org/1.0.6/angular-resource.js">http://code.angularjs.org/1.0.6/angular-resource.js</a></li>
</ul>


<p>Here's a shortcut to do this:</p>

<pre><code>$ wget http://code.angularjs.org/1.0.6/angular.js -P vendor/assets/javascripts
$ wget http://code.angularjs.org/1.0.6/angular-resource.js -P vendor/assets/javascripts
</code></pre>

<h3>Setup the Javascript Folders</h3>

<p>We want to keep our code organized. We will place our controllers, filters, services, directives, etc. in the app/assets/javascripts folder. Create the following directories:</p>

<ul>
<li>app/assets/javascripts/angular/controllers</li>
<li>app/assets/javascripts/angular/directives</li>
<li>app/assets/javascripts/angular/filters</li>
<li>app/assets/javascripts/angular/models</li>
<li>app/assets/javascripts/angular/services</li>
</ul>


<p>Here's a shortcut to do this:</p>

<pre><code>$ mkdir -p app/assets/javascripts/angular/controllers \
           app/assets/javascripts/angular/directives \
           app/assets/javascripts/angular/filters \
           app/assets/javascripts/angular/models \
           app/assets/javascripts/angular/services
</code></pre>

<p>We will not use all of these folders, but it is good to have them there so when we do end up needing to create additional files, we know where to put them.</p>

<h3>Update the Asset Pipeline</h3>

<p>Let's do some cleanup of the Asset Pipeline. First, create the main javascript file which will drive our AngularJS application.</p>

<p>```coffeescript</p>

<h1>app/assets/javascripts/angular_casts.js.coffee</h1>

<p>@app = angular.module('AngularCasts', ['ngResource'])
```</p>

<p>In this file we create a new module called <em>AngularCasts</em> and assign it to <code>@app</code>. We also add the dependency of <code>ngResource</code> which is our angular-resource.js file.</p>

<p>Now open up <em>app/assets/javascripts/application.js</em> and make the following changes:</p>

<p><code>javascript
//= require angular
//= require angular-resource
//= require angular_casts
//= require_tree ./angular
</code></p>

<p>The order of these is important due to the latter ones depending on the ones prior to them. Note that we do not have jQuery in here. AngularJS works great without jQuery and by removing it, we are forced to think the <em>Angular</em> way.</p>

<p>Let's now clean up our Gemfile. We no longer have any dependencies on <em>jquery</em>, <em>turbolinks</em> or <em>jbuilder</em>. Remove them from the Gemfile.</p>

<p>```ruby</p>

<h1>Gemfile</h1>

<p>source 'https://rubygems.org'</p>

<p>gem 'rails', '4.0.0.beta1'
gem 'sqlite3'
gem 'feedzirra'</p>

<p>group :assets do
  gem 'sass-rails',   '~> 4.0.0.beta1'
  gem 'coffee-rails', '~> 4.0.0.beta1'
  gem 'uglifier', '>= 1.0.3'
end
```</p>

<p>Run <code>bundle install</code> to remove the gems from <code>Gemfile.lock</code>.</p>

<pre><code>$ bundle install
</code></pre>

<p>Now that we have removed this, we need to update our layout to not include these libraries. Open up <em>app/views/layouts/application.html.erb</em> and update the javascript and stylesheet includes to the following:</p>

<p><code>ruby
&lt;%= stylesheet_link_tag    "application", media: "all" %&gt;
&lt;%= javascript_include_tag "application" %&gt;
</code></p>

<h2>Let's Get It Working!</h2>

<p>We now have everything in place for our AngularJS application except for the view. We are going to use a simple controller named <code>home</code> with a single view, <code>index</code>.</p>

<p>Run the following command:</p>

<pre><code>$ rails g controller home index
</code></pre>

<p>We now have a controller and view. Let's set this to as our <em>root_path</em> in <code>routes.rb</code>:</p>

<p>```ruby</p>

<h1>config/routes.rb</h1>

<p>AngularCasts::Application.routes.draw do
  get '/episodes' => 'episodes#index', format: 'json'
  get '/episodes/:id' => 'episodes#show', format: 'json'</p>

<p>  root to: 'home#index'
end
```</p>

<p><em>Note that the line <code>get 'home#index'</code> was removed. This is not needed because the root path directs to it.</em></p>

<p>Let's start our app up and make sure it's working.</p>

<pre><code>$ rails s
</code></pre>

<p>Now open <a href="http://localhost:3000">http://localhost:3000</a>. Works? YAY!</p>

<h3>Adding Angular to our Views</h3>

<p>For our app to recognize that it is an Angular application, we need to add the ng-app attribute to the html tag on our layout.</p>

<p>```html</p>

<!-- app/views/layouts/application.html.erb -->


<p><html ng-app="AngularCasts">
```</p>

<p>Let's create a controller that will be used to list out the episodes. Create a new coffeescript file at <em>app/assets/javascripts/angular/controllers/episodes_ctrl.js.coffee</em></p>

<p>```coffeescript</p>

<h1>app/assets/javascripts/angular/controllers/episodes_ctrl.js.coffee</h1>

<p>@EpisodesCtrl = @app.controller 'EpisodesCtrl', ["$scope", ($scope) ->
  $scope.message = "Angular Rocks!"
]
```</p>

<p>Let's update our controller view as well to display the message.</p>

<p>
```html</p>

<!-- app/views/home/index.html.erb -->


<p><header>
  AngularCasts
</header></p>

<div ng-controller="EpisodesCtrl">
  <h1>Message: {{message}}</h1>
</div>


<p>```
</p>

<p>Here we have bound the contents of the <em>div</em> to the controller <em>EpisodesCtrl</em>. Refresh the browser and you should see 'Message: Angular Rocks!'</p>

<h2>List the Episodes</h2>

<p>Now that we have Angular talking to our views, let's integrate our episodes data. Remember that we can access the JSON data by calling <a href="http://localhost:3000/episodes.json">http://localhost:3000/episodes.json</a>.</p>

<p>Modify your controller to perform the ajax request and place the results into the <code>$scope</code></p>

<p>```coffeescript</p>

<h1>app/assets/javascripts/angular/controllers/episodes_ctrl.js.coffee</h1>

<p>@EpisodesCtrl = @app.controller 'EpisodesCtrl', ["$scope", "$http", ($scope, $http) ->
  $scope.episodes = []</p>

<p>  loadEpisodes = -></p>

<pre><code>$http.get("/episodes.json").success((data, status, headers, config) -&gt;
  angular.forEach data, (value) -&gt;
    $scope.episodes.push value.episode
)
</code></pre>

<p>  loadEpisodes()
]
```</p>

<p>*** DESCRIPTION TO FOLLOW</p>

<p>Let's update our view as well to list out the episodes in the scope.</p>

<p>
```html</p>

<!-- app/views/home/index.html.erb -->


<p><header>
  AngularCasts
</header></p>

<div ng-controller="EpisodesCtrl">
  <div id="episode-list-container" >
    <ul>
      <li ng-repeat="episode in episodes">
        <h3>{{episode.title}} <small>({{episode.duration}})</small></h3>
      </li>
    </ul>
  </div>
</div>


<p>```
</p>

<p>Try it out. If all worked well, you should see a list of episodes. Now lets add the much needed CSS to our application. Copy the following into <em>app/assets/stylesheets/episodes.css.scss</em></p>

<p>```css
/<em> app/assets/stylesheets/episodes.css.scss </em>/</p>

<p>body {
  font-size: 12px;
  font-family: Helvetica, sans-serif;
  background-color: #ddd;
  margin: 0px;
}</p>

<p>header {
  background-color: #4F4F4F;
  color: #fff;
  position: absolute;
  height: 36px;
  top: 0;
  left: 0;
  right: 0;
  font-size: 18px;
  line-height: 36px;
  font-weight: bold;
  padding-left: 15px;
}</p>

<h1>episode-list-container {</h1>

<p>  background-color: #fff;
  position: absolute;
  width: 300px;
  top: 37px;
  left: 0;
  bottom: 0;
  overflow: auto;
  -webkit-overflow-scrolling: touch;
  ul {</p>

<pre><code>margin: 0px;
list-style: none;
padding: 0px;
li {
  cursor: pointer;
  border-bottom: 1px solid #ddd;
  padding: 0 10px;
}
</code></pre>

<p>  }
  h3 {</p>

<pre><code>font-size: 14px;
small {
  font-size: 12px;
  color: #ccc;
  font-weight: normal;
}
&amp;.active {
  color: red;
}
</code></pre>

<p>  }
}</p>

<h1>episode-view-container {</h1>

<p>  position: absolute;
  border-left: 1px solid #d0d0d0;
  top: 37px;
  left: 300px;
  right: 0;
  bottom: 0;
  background-color: #fff;
  min-height: 400px;
  padding: 5px 25px;</p>

<p>  #player {</p>

<pre><code>border: 1px solid #000;
max-width: 800px;
</code></pre>

<p>  }
}
```</p>

<p>Refresh the browser again. Ooooh!</p>

<h2>Show the Selected Episode</h2>

<p>When we click on the episode on the left, we want to be able to view the episode with more information in the main area. This can be done in a few steps:</p>

<h3>Add an event listener to the episode</h3>

<p>This is an easy part. Add the ng-click attribute to the <em>h3</em> tag to call the method <em>showEpisode</em>.</p>

<p>
```html</p>

<h3 ng-click="showEpisode(episode)">{{episode.title}} <small>({{episode.duration}})</small></h3>


<p>```
</p>

<p>As you can see, we added <code>ng-click="showEpisode(episode)"</code> to the <em>h3</em> tag. The function call takes the episode as it's parameter, which is available from the ng-repeat.</p>

<h3>Add the function into the controller</h3>

<p>Let's add the <em>showEpisode</em> function to our controller.</p>

<p>```coffeescript</p>

<h1>app/assets/javascripts/angular/controllers/episodes_ctrl.js.coffee</h1>

<p>@EpisodesCtrl = @app.controller 'EpisodesCtrl', ["$scope", "$http", ($scope, $http) -></p>

<p>  $scope.episodes = []
  $scope.selectedEpisode = null</p>

<p>  $scope.showEpisode = (episode) -></p>

<pre><code>$scope.selectedEpisode = episode
</code></pre>

<p>  loadEpisodes = -></p>

<pre><code>$http.get("/episodes.json").success((data, status, headers, config) -&gt;
  angular.forEach data, (value) -&gt;
    $scope.episodes.push value.episode
)
</code></pre>

<p>  loadEpisodes()
]
```</p>

<p>On line 6, we added the scoped variable <em>selectedEpisode</em> with a default value of <em>null</em>.</p>

<p>On lines 8-9, we added the scoped function which is called by the <em>ng-click</em> and sets the <em>selectedEpisode</em> value to the passed in episode.</p>

<p>Now back on the view, let's add the container for the <em>show</em> view.</p>

<p>
```html</p>

<!-- app/views/home/index.html.erb -->


<p><header>
  AngularCasts
</header></p>

<div ng-controller="EpisodesCtrl">
  <div id="episode-list-container" >
    <ul>
      <li ng-repeat="episode in episodes">
        <h3 ng-click="showEpisode(episode)">{{episode.title}} <small>({{episode.duration}})</small></h3>
      </li>
    </ul>
  </div>

  <div id="episode-view-container" ng-show="selectedEpisode">
    <h2>{{selectedEpisode.title}}</h2>
    <p>{{selectedEpisode.description}}</p>

    <div id="player"></div>
  </div>
</div>


<p>```
</p>

<p>Here we have added lines 16-21. In our container div, there is the attribute <code>ng-show="selectedEpisode"</code>. This ensures that the div is only visible if the scoped variable <em>selectedEpisode</em> is set. Line 20 will contain our video, but we'll get to that.</p>

<p>Then inside the div, we display the episode information for the selected episode.</p>

<p>Try it out by <a href="http://localhost:3000">reloading your browser</a>.</p>

<h3>Embed the Video</h3>

<p>Now that we can see the individual episode information, we can add the video embed code. For this we are going to use <a href="http://flowplayer.org">flowplayer</a>. It is fairly simple to set up.</p>

<p>First we need to add the required <em>css</em> and <em>javascript</em> libraries to our layout. Open up <em>application.html.erb</em> and make the following changes:</p>

<p>```html</p>

<!-- app/views/layouts/application.html.erb -->


<p>&lt;!DOCTYPE html>
<html ng-app="AngularCasts">
<head>
  <title>AngularCasts</title>
  &lt;%= stylesheet_link_tag "application", "http://releases.flowplayer.org/5.4.0/skin/minimalist.css" %>
  &lt;%= javascript_include_tag "application",</p>

<pre><code>                         "http://ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js",
                         "http://releases.flowplayer.org/5.4.0/flowplayer.min.js" %&gt;
</code></pre>

<p>  &lt;%= csrf_meta_tags %>
</head>
<body></p>

<p>&lt;%= yield %></p>

<p></body>
</html>
```</p>

<p>Here we added a new stylesheet and two additional javascript files to our include tags. As you can see, jQuery was included. This is a dependency of flowplayer, so we had to add it. But we have made it this far without it!</p>

<p>Now we can embed the video from within our controller. This is very simple.</p>

<p>```coffeescript</p>

<h1>app/assets/javascripts/angular/controllers/episodes_ctrl.js.coffee</h1>

<p>@EpisodesCtrl = @app.controller 'EpisodesCtrl', ["$scope", "$http", ($scope, $http) -></p>

<p>  $scope.episodes = []
  $scope.selectedEpisode = null</p>

<p>  $scope.showEpisode = (episode) -></p>

<pre><code>$scope.selectedEpisode = episode
loadVideo(episode)
</code></pre>

<p>  loadVideo = (episode) -></p>

<pre><code>$("#player").flowplayer
  playlist: [[mp4: episode.video_url]]
  ratio: 9 / 14
</code></pre>

<p>  loadEpisodes = -></p>

<pre><code>$http.get("/episodes.json").success((data, status, headers, config) -&gt;
  angular.forEach data, (value) -&gt;
    $scope.episodes.push value.episode
)
</code></pre>

<p>  loadEpisodes()
]
```</p>

<p>On line 10, we added a call to the function <em>loadVideo</em> passing in the episode.</p>

<p>On lines 12-15, we define a function which performs the javascript in order to load the video into <code>&lt;div id="player"&gt;&lt;/div&gt;</code>. You can see that we pass in the episode's video_url as the mp4 and set the ratio to 9/14.</p>

<p>Let's give it another go. Refresh your browser. You should now have a fully-functional AngularJS application!!!</p>

<h2>Visual Feedback</h2>

<p>The final item we will be adding in our application is some visual feedback as to which video we are watching. In other words, we want to highlight the selected video on the left list.</p>

<p>Add the following <em>ng-class</em> attribute to the <em>h3</em> tag:</p>

<p><code>html
...
&lt;li ng-repeat="episode in episodes"&gt;
  &lt;h3 ng-click="showEpisode(episode)" ng-class="isSelected(episode)"&gt; &lt;small&gt;()&lt;/small&gt;&lt;/h3&gt;
&lt;/li&gt;
...
</code></p>

<p>We now are using the function <code>isSelected(episode)</code> as the class name. Let's add this to our controller.</p>

<p>```coffeescript</p>

<h1>app/assets/javascripts/angular/controllers/episodes_ctrl.js.coffee</h1>

<p>@EpisodesCtrl = @app.controller 'EpisodesCtrl', ["$scope", "$http", ($scope, $http) -></p>

<p>  $scope.episodes = []
  $scope.selectedEpisode = null</p>

<p>  $scope.showEpisode = (episode) -></p>

<pre><code>$scope.selectedEpisode = episode
loadVideo(episode)
</code></pre>

<p>  $scope.isSelected = (episode) -></p>

<pre><code>'active' if $scope.selectedEpisode == episode
</code></pre>

<p>  loadVideo = (episode) -></p>

<pre><code>$("#player").flowplayer
  playlist: [[mp4: episode.video_url]]
  ratio: 9 / 14
</code></pre>

<p>  loadEpisodes = -></p>

<pre><code>$http.get("/episodes.json").success((data, status, headers, config) -&gt;
  angular.forEach data, (value) -&gt;
    $scope.episodes.push value.episode
)
</code></pre>

<p>  loadEpisodes()
]
```</p>

<p>On lines 12-13, we have added the function <em>isSelected</em>. It will return 'active' if the selectedEpisode is the episode that was clicked.</p>

<h2>Final Product</h2>

<p><img src="http://f.cl.ly/items/2r0I1w1L3d1s0N0l2A0v/angular_casts.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS on Rails 4 - Part 1]]></title>
    <link href="http://coderberry.me/blog/2013/04/22/angularjs-on-rails-4-part-1/"/>
    <updated>2013-04-22T22:28:00-06:00</updated>
    <id>http://coderberry.me/blog/2013/04/22/angularjs-on-rails-4-part-1</id>
    <content type="html"><![CDATA[<div style="width: 242px;
      height: 388px;
      margin: 10px 30px 10px 0;
      float: left;
      background: transparent url(http://f.cl.ly/items/1n0f2g2z2w2U0s2h2t40/angular_mug.jpg) -60px -80px no-repeat;">
</div>


<p>AngularJS seems to be the big craze as of late. Some may agree and some may not, but AngularJS is one of the next big contenders for being the number one choice of developers.</p>

<p>Here I want to create a useful Rails application using AngularJS. The goal is to have a single-page application which allows us to select a screencast link on the left and view it on the right. An example of this would be found at <a href="http://ember101.com">http://ember101.com</a>.</p>

<p>We will take it a step further though and set up filtering using search boxes and perhaps more. So let's get started!</p>

<div style="clear: both;"></div>


<h2>Creating the Rails Application</h2>

<p>Let's start off by creating a new Rails application called <em>Angular Casts</em></p>

<pre><code>$ rails new angular_casts
</code></pre>

<p>Because we are going to import video feeds from external sites, we need to use a feed parsing library. The best one available is <a href="https://github.com/pauldix/feedzirra">feedzirra</a>. Go ahead and add it to the Gemfile and run <code>bundle install</code>.</p>

<pre><code>gem 'feedzirra'

$ bundle install
</code></pre>

<h2>Importing Data</h2>

<p>Now that we have our app in place, we want to be able to import feed data into our application. To do so, we will need to store it in our database.</p>

<p>Create a new model using the <em>resource</em> generator. This will generate the controller but not the views. Let's call our model <strong>episode</strong>.</p>

<pre><code>$ rails g resource episode title description pub_date:datetime video_url link guid duration source
</code></pre>

<p>The easiest way for us to import the data is with a rake task. This is a good way to go if we don't plan on doing continuous updates to the feed. The rake task will simply call the importer library that we will write.</p>

<p>```ruby</p>

<h1>lib/tasks/episode_sync.rake</h1>

<p>require 'railscast_feed'</p>

<p>namespace :episode_sync do
  desc 'sync all missing episodes from Railscasts.com'
  task :railscasts => :environment do</p>

<pre><code>RailscastFeed.sync
</code></pre>

<p>  end
end
```</p>

<p>Now we need to create the importing functionality in a lib file.</p>

<p>```ruby</p>

<h1>lib/railscast_feed.rb</h1>

<p>require 'feedzirra'
class RailscastFeed</p>

<p>  def self.sync</p>

<pre><code># add additional elements to be parsed from the feed entries
Feedzirra::Feed.add_common_feed_entry_element(:enclosure, :value =&gt; :url, :as =&gt; :video_url)
Feedzirra::Feed.add_common_feed_entry_element('itunes:duration', :as =&gt; :duration)

feed = Feedzirra::Feed.fetch_and_parse("http://feeds.feedburner.com/railscasts")
feed.entries.each do |entry|
  Episode.create_from(entry, 'railscasts')
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Finally, let's update our model to create the entries, along with validators to ensure we have good data.</p>

<p>```ruby</p>

<h1>app/models/episode.rb</h1>

<p>class Episode &lt; ActiveRecord::Base</p>

<p>  validates :guid, presence: true, uniqueness: [ scope: :source ]
  validates :title, :description, :pub_date, :video_url, :link, :source, presence: true</p>

<p>  def self.create_from(entry, source)</p>

<pre><code>Episode.where(:guid =&gt; entry.entry_id, :source =&gt; source).first_or_create(
  title:       entry.title,
  description: entry.summary,
  pub_date:    entry.published,
  video_url:   entry.video_url,
  link:        entry.url,
  duration:    entry.duration
)
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Now that this is all complete, import the episodes using the rake task we created.</p>

<pre><code>$ rake episode_sync:railscasts
</code></pre>

<p>Congrats! But no time to celebrate.. let's move on.</p>

<h2>Making Episodes Accessible via API</h2>

<p>Because we are planning on using AngularJS for our front-end, we only need to expose our data as JSON. This will allow AngularJS to talk to the backend via ajax calls.</p>

<p>We are going to only use two calls to the API:</p>

<ul>
<li><strong>/episodes.json</strong> - returns a full list of episodes</li>
<li><strong>/episodes/ID.json</strong> - returns data for a specified episode (where ID is the unique ID of the episode in our db)</li>
</ul>


<p>Our routes already include the resources mapping for the episodes. However, let's do some cleanup and make sure we only are allowing what we want to use. We will default the format to 'json' because we will not be using anything else.</p>

<p>```ruby</p>

<h1>config/routes.rb</h1>

<p>AngularCasts::Application.routes.draw do
  # resources :episodes
  get '/episodes' => 'episodes#index', format: 'json'
  get '/episodes/:id' => 'episodes#show', format: 'json'
end
```</p>

<p>Now update the controller to render the correct JSON data for the two URL's.</p>

<p>```ruby</p>

<h1>app/models/episodes_controller.rb</h1>

<p>class EpisodesController &lt; ApplicationController
  respond_to :json</p>

<p>  def index</p>

<pre><code>respond_with Episode.all
</code></pre>

<p>  end</p>

<p>  def show</p>

<pre><code>respond_with Episode.find(params[:id])
</code></pre>

<p>  end
end
```</p>

<p>Cool. If you are feeling brave, start up your Rails application and visit this link: <a href="http://localhost:3000/episodes.json">http://localhost:3000/episodes.json</a>. If all went well, you should see JSON data. You should also be able to view <a href="http://localhost:3000/episodes/1.json">http://localhost:3000/episodes/1.json</a> and see the data belonging to a single episode.</p>

<p>Example:</p>

<p>```javascript
{
  "episode": {</p>

<pre><code>"id": 1,
"title": "#412 Fast Rails Commands",
"description": "Rails commands, such as generators, migrations, and tests, have a tendency to be slow because they need to load the Rails app each time. Here I show three tools to make this faster: Zeus, Spring, and Commands.",
"pub_date": "2013-04-04T07:00:00.000Z",
"video_url": "http://media.railscasts.com/assets/episodes/videos/412-fast-rails-commands.mp4",
"link": "http://railscasts.com/episodes/412-fast-rails-commands",
"guid": "fast-rails-commands",
"duration": "8:06",
"source": "railscasts",
"created_at": "2013-04-23T04:46:32.768Z",
"updated_at": "2013-04-23T04:46:32.768Z"
</code></pre>

<p>  }
}
```</p>

<p>Let's stop for now. Our next steps will be getting our hands dirty with AngularJS.</p>

<h3>Go to <a href="/blog/2013/04/23/angularjs-on-rails-4-part-2/">Part 2</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrapping AngularJS with Yeoman]]></title>
    <link href="http://coderberry.me/blog/2013/02/13/bootstrapping-angularjs-with-yeoman/"/>
    <updated>2013-02-13T16:13:00-07:00</updated>
    <id>http://coderberry.me/blog/2013/02/13/bootstrapping-angularjs-with-yeoman</id>
    <content type="html"><![CDATA[<p><em>Note: This post is incomplete and will be worked on over the next week</em></p>

<div style="width: 242px;
      height: 388px;
      margin: 10px 30px 10px 0;
      float: left;
      background: transparent url(/images/posts/angular-yeoman.png) top left no-repeat;">
</div>


<p><strong><a href="http://angularjs.org/">AngularJS</a> is awesome.</strong></p>

<p>If you are here, you already know that. If not, <a href="http://www.youtube.com/user/angularjs">watch these videos</a>.</p>

<p><strong><a href="http://yeoman.io">Yeoman</a> is awesome.</strong></p>

<p>If you are here, you <em>might</em> not know that already. It is similar to <a href="http://middlemanapp.com">middleman</a> but is Node driven instead of ruby. For a kickstart, watch the <a href="http://www.youtube.com/watch?feature=player_embedded&amp;v=vFacaBinGZ0">screencast by Addi Osmani</a>.</p>

<p>Yeoman also provides support for easy scaffolding, auto-compilation of CoffeeScript and Compass, live preview servers and more. Yup, I was just listing some of the features from <a href="http://yeoman.io/">their site</a>.</p>

<p>Combine these together and you have an excellent solution to bootstrapping your AngularJS applications.</p>

<h2>Install Yeoman</h2>

<p>Install Yeoman with the following command:</p>

<pre><code>$ curl -L get.yeoman.io | bash
</code></pre>

<p>Once this is done, you can confirm the install and version:</p>

<pre><code>$ yeoman --version
yeoman  v0.9.1
</code></pre>

<h2>AngularJS Generators</h2>

<p>The generators that Yeoman provides for AngularJS can be found on <a href="https://github.com/yeoman/generator-angular">GitHub</a>. To view the available generators, type <code>$ yeoman init --help</code>. Here are the Angular related generators</p>

<h4>angular:controller</h4>

<pre><code>Usage:
  yeoman init angular:controller NAME [options]

Options:
  -h, --help  # Print generator's options and usage  
              # Default: false

Description:
    Creates a new Angular controller

Example:
    yeoman init angular:controller Thing

    This will create:
        app/scripts/controllers/thing-ctrl.js
</code></pre>

<h4>angular:filter</h4>

<pre><code>Usage:
  yeoman init angular:filter NAME [options]

Options:
  -h, --help  # Print generator's options and usage  
              # Default: false

Description:
    Creates a new AngularJS filter

Example:
    yeoman init angular:filter thing

    This will create:
        app/scripts/filters/thing.js
</code></pre>

<h4>angular:route</h4>

<pre><code>Usage:
  yeoman init angular:route NAME [options]

Options:
  -h, --help                # Print generator's options and usage  
                            # Default: false
      --angular:controller  # Angular:controller to be invoked     
                            # Default: 
      --angular:view        # Angular:view to be invoked           
                            # Default: 

Description:
    Creates a new AngularJS route

Example:
    yeoman init angular:route thing

    This will create:
        app/scripts/controllers/thing.js
        app/views/thing.html
    And add routing to:
        app.js
</code></pre>

<h4>angular:service</h4>

<pre><code>Usage:
  yeoman init angular:service NAME [type] [options]

Options:
  -h, --help  # Print generator's options and usage  
              # Default: false

Description:
    Creates a new AngularJS service.
    Docs: http://docs.angularjs.org/guide/dev_guide.services.creating_services

Example:
    yeoman init angular:service thing

    This will create:
        app/scripts/services/thing.js
</code></pre>

<h4>angular:view</h4>

<pre><code>Usage:
  yeoman init angular:view NAME [options]

Options:
  -h, --help  # Print generator's options and usage  
              # Default: false

Description:
    Creates a new AngularJS view

Example:
    yeoman init angular:view Thing

    This will create:
        app/scripts/views/thing.html
</code></pre>

<h4>angular:directive</h4>

<pre><code>Usage:
  yeoman init angular:directive NAME [options]

Options:
  -h, --help  # Print generator's options and usage  
              # Default: false

Description:
    Creates a new Angular directive

Example:
    yeoman init angular:directive thing

    This will create:
        app/scripts/directives/thing.js
</code></pre>

<h4>angular:app</h4>

<pre><code>Usage:
  yeoman init angular:app [options]

Options:
  -h, --help  # Print generator's options and usage  
              # Default: false  

Description:
    Create a base Angular application

Example:
    yeoman init angular:app

    This will create:
        app/.htaccess
        app/404.html
        app/favicon.ico
        app/robots.txt
        app/scripts/vendor/angular.js
        app/scripts/vendor/angular.min.js
        app/styles/main.css
        app/views/main.html
        Gruntfile.js
        package.json
        test/lib/angular-mocks.js
        app/scripts/thing.js
        app/index.html
</code></pre>

<h4>angular:all</h4>

<pre><code>Usage:
  yeoman init angular:all [options]

Options:
  -h, --help                # Print generator's options and usage  
                            # Default: false
      --angular:app         # Angular:app to be invoked            
                            # Default: 
      --angular:controller  # Angular:controller to be invoked     
                            # Default: 
      --testacular:app      # Testacular:app to be invoked         
                            # Default: 

Description:
    Creates a complete starter Angular application with a main 
    controller, view and tests

Example:
    yeoman init angular

    This will create:
        app/.htaccess
        app/404.html
        app/favicon.ico
        app/robots.txt
        app/scripts/vendor/angular.js
        app/scripts/vendor/angular.min.js
        app/styles/main.css
        app/views/main.html
        Gruntfile.js
        package.json
        test/lib/angular-mocks.js
        app/scripts/thing.js
        app/index.html
        app/scripts/controllers/main.js
        test/spec/controllers/main.js
        testacular.conf.js
</code></pre>

<h2>Bootstrap your app</h2>

<div style="width: 170px;
      height: 200px;
      margin: 10px 0 10px 30px;
      float: right;
      background: transparent url(/images/posts/instant-gratification.png) top left no-repeat;">
</div>


<p>The first thing that must be done is create a base folder for the application.</p>

<pre><code>$ mkdir my_app
$ cd my_app/
</code></pre>

<p>Now run the <strong>angular:all</strong> generator:</p>

<pre><code>$ yeoman init angular:all
</code></pre>

<p>Finally, start up your server by running</p>

<pre><code>$ yeoman server
</code></pre>

<p>Now when you make code changes, it will update live to the app.</p>

<h2>TBD</h2>

<ul>
<li>Enhance the documentation listed above.</li>
<li>Show how to use the yo CLI tool</li>
<li>Use yeoman to create CoffeeScript instead of JavaScript</li>
</ul>

]]></content>
  </entry>
  
</feed>
