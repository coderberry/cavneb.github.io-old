<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | coderberry]]></title>
  <link href="http://coderberry.me/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://coderberry.me/"/>
  <updated>2013-04-30T09:06:00-06:00</updated>
  <id>http://coderberry.me/</id>
  <author>
    <name><![CDATA[Eric Berry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS on Rails 4 - Part 2]]></title>
    <link href="http://coderberry.me/blog/2013/04/23/angularjs-on-rails-4-part-2/"/>
    <updated>2013-04-23T07:35:00-06:00</updated>
    <id>http://coderberry.me/blog/2013/04/23/angularjs-on-rails-4-part-2</id>
    <content type="html"><![CDATA[<p>Let's pick up where we left off. If you haven't already, make sure you go through <a href="/blog/2013/04/22/angularjs-on-rails-4-part-1/">Part 1</a> to create your base Rails app with the API setup.</p>

<p>You can either continue using the code you have created on part 1 or you can catch up by checking out the tagged code:</p>

<pre><code>$ git clone https://github.com/cavneb/angular_casts
$ cd angular_casts
$ git checkout 'step-2'
$ bundle install
$ rake db:migrate
</code></pre>

<h2>Add AngularJS Libraries</h2>

<p>There are a couple of different ways we can add AngularJS into our application. <a href="http://railscasts.com/episodes/405-angularjs">Ryan Bates</a> suggests using the <a href="https://github.com/hiravgandhi/angularjs-rails">angular-rails gem</a>. I found this to be a bit outdated and overkill for what we are trying to do. Not only that, it's good to know how to do this without a gem.</p>

<p>Go to <a href="http://code.angularjs.org/1.0.6/">http://code.angularjs.org/1.0.6/</a> and download the following files into your vendor/assets/javascripts folder:</p>

<ul>
<li><a href="http://code.angularjs.org/1.0.6/angular.js">http://code.angularjs.org/1.0.6/angular.js</a></li>
<li><a href="http://code.angularjs.org/1.0.6/angular-resource.js">http://code.angularjs.org/1.0.6/angular-resource.js</a></li>
</ul>


<p>Here's a shortcut to do this:</p>

<pre><code>$ wget http://code.angularjs.org/1.0.6/angular.js -P vendor/assets/javascripts
$ wget http://code.angularjs.org/1.0.6/angular-resource.js -P vendor/assets/javascripts
</code></pre>

<h3>Setup the Javascript Folders</h3>

<p>We want to keep our code organized. We will place our controllers, filters, services, directives, etc. in the app/assets/javascripts folder. Create the following directories:</p>

<ul>
<li>app/assets/javascripts/angular/controllers</li>
<li>app/assets/javascripts/angular/directives</li>
<li>app/assets/javascripts/angular/filters</li>
<li>app/assets/javascripts/angular/models</li>
<li>app/assets/javascripts/angular/services</li>
</ul>


<p>Here's a shortcut to do this:</p>

<pre><code>$ mkdir -p app/assets/javascripts/angular/controllers \
           app/assets/javascripts/angular/directives \
           app/assets/javascripts/angular/filters \
           app/assets/javascripts/angular/models \
           app/assets/javascripts/angular/services
</code></pre>

<p>We will not use all of these folders, but it is good to have them there so when we do end up needing to create additional files, we know where to put them.</p>

<h3>Update the Asset Pipeline</h3>

<p>Let's do some cleanup of the Asset Pipeline. First, create the main javascript file which will drive our AngularJS application.</p>

<p>```coffeescript</p>

<h1>app/assets/javascripts/angular_casts.js.coffee</h1>

<p>@app = angular.module('AngularCasts', ['ngResource'])
```</p>

<p>In this file we create a new module called <em>AngularCasts</em> and assign it to <code>@app</code>. We also add the dependency of <code>ngResource</code> which is our angular-resource.js file.</p>

<p>Now open up <em>app/assets/javascripts/application.js</em> and make the following changes:</p>

<p><code>javascript
//= require angular
//= require angular-resource
//= require angular_casts
//= require_tree ./angular
</code></p>

<p>The order of these is important due to the latter ones depending on the ones prior to them. Note that we do not have jQuery in here. AngularJS works great without jQuery and by removing it, we are forced to think the <em>Angular</em> way.</p>

<p>Let's now clean up our Gemfile. We no longer have any dependencies on <em>jquery</em>, <em>turbolinks</em> or <em>jbuilder</em>. Remove them from the Gemfile.</p>

<p>```ruby</p>

<h1>Gemfile</h1>

<p>source 'https://rubygems.org'</p>

<p>gem 'rails', '4.0.0.beta1'
gem 'sqlite3'
gem 'feedzirra'</p>

<p>group :assets do
  gem 'sass-rails',   '~> 4.0.0.beta1'
  gem 'coffee-rails', '~> 4.0.0.beta1'
  gem 'uglifier', '>= 1.0.3'
end
```</p>

<p>Run <code>bundle install</code> to remove the gems from <code>Gemfile.lock</code>.</p>

<pre><code>$ bundle install
</code></pre>

<p>Now that we have removed this, we need to update our layout to not include these libraries. Open up <em>app/views/layouts/application.html.erb</em> and update the javascript and stylesheet includes to the following:</p>

<p><code>ruby
&lt;%= stylesheet_link_tag    "application", media: "all" %&gt;
&lt;%= javascript_include_tag "application" %&gt;
</code></p>

<h2>Let's Get It Working!</h2>

<p>We now have everything in place for our AngularJS application except for the view. We are going to use a simple controller named <code>home</code> with a single view, <code>index</code>.</p>

<p>Run the following command:</p>

<pre><code>$ rails g controller home index
</code></pre>

<p>We now have a controller and view. Let's set this to as our <em>root_path</em> in <code>routes.rb</code>:</p>

<p>```ruby</p>

<h1>config/routes.rb</h1>

<p>AngularCasts::Application.routes.draw do
  get '/episodes' => 'episodes#index', format: 'json'
  get '/episodes/:id' => 'episodes#show', format: 'json'</p>

<p>  root to: 'home#index'
end
```</p>

<p><em>Note that the line <code>get 'home#index'</code> was removed. This is not needed because the root path directs to it.</em></p>

<p>Let's start our app up and make sure it's working.</p>

<pre><code>$ rails s
</code></pre>

<p>Now open <a href="http://localhost:3000">http://localhost:3000</a>. Works? YAY!</p>

<h3>Adding Angular to our Views</h3>

<p>For our app to recognize that it is an Angular application, we need to add the ng-app attribute to the html tag on our layout.</p>

<p>```html</p>

<!-- app/views/layouts/application.html.erb -->


<p><html ng-app="AngularCasts">
```</p>

<p>Let's create a controller that will be used to list out the episodes. Create a new coffeescript file at <em>app/assets/javascripts/angular/controllers/episodes_ctrl.js.coffee</em></p>

<p>```coffeescript</p>

<h1>app/assets/javascripts/angular/controllers/episodes_ctrl.js.coffee</h1>

<p>@EpisodesCtrl = @app.controller 'EpisodesCtrl', ["$scope", ($scope) ->
  $scope.message = "Angular Rocks!"
]
```</p>

<p>Let's update our controller view as well to display the message.</p>

<p>
```html</p>

<!-- app/views/home/index.html.erb -->


<p><header>
  AngularCasts
</header></p>

<div ng-controller="EpisodesCtrl">
  <h1>Message: {{message}}</h1>
</div>


<p>```
</p>

<p>Here we have bound the contents of the <em>div</em> to the controller <em>EpisodesCtrl</em>. Refresh the browser and you should see 'Message: Angular Rocks!'</p>

<h2>List the Episodes</h2>

<p>Now that we have Angular talking to our views, let's integrate our episodes data. Remember that we can access the JSON data by calling <a href="http://localhost:3000/episodes.json">http://localhost:3000/episodes.json</a>.</p>

<p>Modify your controller to perform the ajax request and place the results into the <code>$scope</code></p>

<p>```coffeescript</p>

<h1>app/assets/javascripts/angular/controllers/episodes_ctrl.js.coffee</h1>

<p>@EpisodesCtrl = @app.controller 'EpisodesCtrl', ["$scope", "$http", ($scope, $http) ->
  $scope.episodes = []</p>

<p>  loadEpisodes = -></p>

<pre><code>$http.get("/episodes.json").success((data, status, headers, config) -&gt;
  angular.forEach data, (value) -&gt;
    $scope.episodes.push value.episode
)
</code></pre>

<p>  loadEpisodes()
]
```</p>

<p>*** DESCRIPTION TO FOLLOW</p>

<p>Let's update our view as well to list out the episodes in the scope.</p>

<p>
```html</p>

<!-- app/views/home/index.html.erb -->


<p><header>
  AngularCasts
</header></p>

<div ng-controller="EpisodesCtrl">
  <div id="episode-list-container" >
    <ul>
      <li ng-repeat="episode in episodes">
        <h3>{{episode.title}} <small>({{episode.duration}})</small></h3>
      </li>
    </ul>
  </div>
</div>


<p>```
</p>

<p>Try it out. If all worked well, you should see a list of episodes. Now lets add the much needed CSS to our application. Copy the following into <em>app/assets/stylesheets/episodes.css.scss</em></p>

<p>```css
/<em> app/assets/stylesheets/episodes.css.scss </em>/</p>

<p>body {
  font-size: 12px;
  font-family: Helvetica, sans-serif;
  background-color: #ddd;
  margin: 0px;
}</p>

<p>header {
  background-color: #4F4F4F;
  color: #fff;
  position: absolute;
  height: 36px;
  top: 0;
  left: 0;
  right: 0;
  font-size: 18px;
  line-height: 36px;
  font-weight: bold;
  padding-left: 15px;
}</p>

<h1>episode-list-container {</h1>

<p>  background-color: #fff;
  position: absolute;
  width: 300px;
  top: 37px;
  left: 0;
  bottom: 0;
  overflow: auto;
  -webkit-overflow-scrolling: touch;
  ul {</p>

<pre><code>margin: 0px;
list-style: none;
padding: 0px;
li {
  cursor: pointer;
  border-bottom: 1px solid #ddd;
  padding: 0 10px;
}
</code></pre>

<p>  }
  h3 {</p>

<pre><code>font-size: 14px;
small {
  font-size: 12px;
  color: #ccc;
  font-weight: normal;
}
&amp;.active {
  color: red;
}
</code></pre>

<p>  }
}</p>

<h1>episode-view-container {</h1>

<p>  position: absolute;
  border-left: 1px solid #d0d0d0;
  top: 37px;
  left: 300px;
  right: 0;
  bottom: 0;
  background-color: #fff;
  min-height: 400px;
  padding: 5px 25px;</p>

<p>  #player {</p>

<pre><code>border: 1px solid #000;
max-width: 800px;
</code></pre>

<p>  }
}
```</p>

<p>Refresh the browser again. Ooooh!</p>

<h2>Show the Selected Episode</h2>

<p>When we click on the episode on the left, we want to be able to view the episode with more information in the main area. This can be done in a few steps:</p>

<h3>Add an event listener to the episode</h3>

<p>This is an easy part. Add the ng-click attribute to the <em>h3</em> tag to call the method <em>showEpisode</em>.</p>

<p>
```html</p>

<h3 ng-click="showEpisode(episode)">{{episode.title}} <small>({{episode.duration}})</small></h3>


<p>```
</p>

<p>As you can see, we added <code>ng-click="showEpisode(episode)"</code> to the <em>h3</em> tag. The function call takes the episode as it's parameter, which is available from the ng-repeat.</p>

<h3>Add the function into the controller</h3>

<p>Let's add the <em>showEpisode</em> function to our controller.</p>

<p>```coffeescript</p>

<h1>app/assets/javascripts/angular/controllers/episodes_ctrl.js.coffee</h1>

<p>@EpisodesCtrl = @app.controller 'EpisodesCtrl', ["$scope", "$http", ($scope, $http) -></p>

<p>  $scope.episodes = []
  $scope.selectedEpisode = null</p>

<p>  $scope.showEpisode = (episode) -></p>

<pre><code>$scope.selectedEpisode = episode
</code></pre>

<p>  loadEpisodes = -></p>

<pre><code>$http.get("/episodes.json").success((data, status, headers, config) -&gt;
  angular.forEach data, (value) -&gt;
    $scope.episodes.push value.episode
)
</code></pre>

<p>  loadEpisodes()
]
```</p>

<p>On line 6, we added the scoped variable <em>selectedEpisode</em> with a default value of <em>null</em>.</p>

<p>On lines 8-9, we added the scoped function which is called by the <em>ng-click</em> and sets the <em>selectedEpisode</em> value to the passed in episode.</p>

<p>Now back on the view, let's add the container for the <em>show</em> view.</p>

<p>
```html</p>

<!-- app/views/home/index.html.erb -->


<p><header>
  AngularCasts
</header></p>

<div ng-controller="EpisodesCtrl">
  <div id="episode-list-container" >
    <ul>
      <li ng-repeat="episode in episodes">
        <h3 ng-click="showEpisode(episode)">{{episode.title}} <small>({{episode.duration}})</small></h3>
      </li>
    </ul>
  </div>

  <div id="episode-view-container" ng-show="selectedEpisode">
    <h2>{{selectedEpisode.title}}</h2>
    <p>{{selectedEpisode.description}}</p>

    <div id="player"></div>
  </div>
</div>


<p>```
</p>

<p>Here we have added lines 16-21. In our container div, there is the attribute <code>ng-show="selectedEpisode"</code>. This ensures that the div is only visible if the scoped variable <em>selectedEpisode</em> is set. Line 20 will contain our video, but we'll get to that.</p>

<p>Then inside the div, we display the episode information for the selected episode.</p>

<p>Try it out by <a href="http://localhost:3000">reloading your browser</a>.</p>

<h3>Embed the Video</h3>

<p>Now that we can see the individual episode information, we can add the video embed code. For this we are going to use <a href="http://flowplayer.org">flowplayer</a>. It is fairly simple to set up.</p>

<p>First we need to add the required <em>css</em> and <em>javascript</em> libraries to our layout. Open up <em>application.html.erb</em> and make the following changes:</p>

<p>```html</p>

<!-- app/views/layouts/application.html.erb -->


<p>&lt;!DOCTYPE html>
<html ng-app="AngularCasts">
<head>
  <title>AngularCasts</title>
  &lt;%= stylesheet_link_tag "application", "http://releases.flowplayer.org/5.4.0/skin/minimalist.css" %>
  &lt;%= javascript_include_tag "application",</p>

<pre><code>                         "http://ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js",
                         "http://releases.flowplayer.org/5.4.0/flowplayer.min.js" %&gt;
</code></pre>

<p>  &lt;%= csrf_meta_tags %>
</head>
<body></p>

<p>&lt;%= yield %></p>

<p></body>
</html>
```</p>

<p>Here we added a new stylesheet and two additional javascript files to our include tags. As you can see, jQuery was included. This is a dependency of flowplayer, so we had to add it. But we have made it this far without it!</p>

<p>Now we can embed the video from within our controller. This is very simple.</p>

<p>```coffeescript</p>

<h1>app/assets/javascripts/angular/controllers/episodes_ctrl.js.coffee</h1>

<p>@EpisodesCtrl = @app.controller 'EpisodesCtrl', ["$scope", "$http", ($scope, $http) -></p>

<p>  $scope.episodes = []
  $scope.selectedEpisode = null</p>

<p>  $scope.showEpisode = (episode) -></p>

<pre><code>$scope.selectedEpisode = episode
loadVideo(episode)
</code></pre>

<p>  loadVideo = (episode) -></p>

<pre><code>$("#player").flowplayer
  playlist: [[mp4: episode.video_url]]
  ratio: 9 / 14
</code></pre>

<p>  loadEpisodes = -></p>

<pre><code>$http.get("/episodes.json").success((data, status, headers, config) -&gt;
  angular.forEach data, (value) -&gt;
    $scope.episodes.push value.episode
)
</code></pre>

<p>  loadEpisodes()
]
```</p>

<p>On line 10, we added a call to the function <em>loadVideo</em> passing in the episode.</p>

<p>On lines 12-15, we define a function which performs the javascript in order to load the video into <code>&lt;div id="player"&gt;&lt;/div&gt;</code>. You can see that we pass in the episode's video_url as the mp4 and set the ratio to 9/14.</p>

<p>Let's give it another go. Refresh your browser. You should now have a fully-functional AngularJS application!!!</p>

<h2>Visual Feedback</h2>

<p>The final item we will be adding in our application is some visual feedback as to which video we are watching. In other words, we want to highlight the selected video on the left list.</p>

<p>Add the following <em>ng-class</em> attribute to the <em>h3</em> tag:</p>

<p><code>html
...
&lt;li ng-repeat="episode in episodes"&gt;
  &lt;h3 ng-click="showEpisode(episode)" ng-class="isSelected(episode)"&gt; &lt;small&gt;()&lt;/small&gt;&lt;/h3&gt;
&lt;/li&gt;
...
</code></p>

<p>We now are using the function <code>isSelected(episode)</code> as the class name. Let's add this to our controller.</p>

<p>```coffeescript</p>

<h1>app/assets/javascripts/angular/controllers/episodes_ctrl.js.coffee</h1>

<p>@EpisodesCtrl = @app.controller 'EpisodesCtrl', ["$scope", "$http", ($scope, $http) -></p>

<p>  $scope.episodes = []
  $scope.selectedEpisode = null</p>

<p>  $scope.showEpisode = (episode) -></p>

<pre><code>$scope.selectedEpisode = episode
loadVideo(episode)
</code></pre>

<p>  $scope.isSelected = (episode) -></p>

<pre><code>'active' if $scope.selectedEpisode == episode
</code></pre>

<p>  loadVideo = (episode) -></p>

<pre><code>$("#player").flowplayer
  playlist: [[mp4: episode.video_url]]
  ratio: 9 / 14
</code></pre>

<p>  loadEpisodes = -></p>

<pre><code>$http.get("/episodes.json").success((data, status, headers, config) -&gt;
  angular.forEach data, (value) -&gt;
    $scope.episodes.push value.episode
)
</code></pre>

<p>  loadEpisodes()
]
```</p>

<p>On lines 12-13, we have added the function <em>isSelected</em>. It will return 'active' if the selectedEpisode is the episode that was clicked.</p>

<h2>Final Product</h2>

<p><img src="http://f.cl.ly/items/2r0I1w1L3d1s0N0l2A0v/angular_casts.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS on Rails 4 - Part 1]]></title>
    <link href="http://coderberry.me/blog/2013/04/22/angularjs-on-rails-4-part-1/"/>
    <updated>2013-04-22T22:28:00-06:00</updated>
    <id>http://coderberry.me/blog/2013/04/22/angularjs-on-rails-4-part-1</id>
    <content type="html"><![CDATA[<div style="width: 242px;
      height: 388px;
      margin: 10px 30px 10px 0;
      float: left;
      background: transparent url(http://f.cl.ly/items/1n0f2g2z2w2U0s2h2t40/angular_mug.jpg) -60px -80px no-repeat;">
</div>


<p>AngularJS seems to be the big craze as of late. Some may agree and some may not, but AngularJS is one of the next big contenders for being the number one choice of developers. At the time of writing this article, AngularJS is the <a href="https://github.com/languages/JavaScript/most_watched">15th most watched project on GitHub</a>.</p>

<p>A few days back, I presented at our local <a href="http://utruby.org">ruby users group</a> on writing an API-driven Rails app with AngularJS on the front end. Since then, I have received a lot of feedback on how I could have enhanced the app. This article has been re-written to reflect those changes. <em>Special thanks goes to <a href="http://tadthorley.com/">Tad Thorley</a> for providing the <a href="https://github.com/phaedryx/angularcast-example">excellent example application</a> based off of the original.</em></p>

<p>Here I want to create a useful Rails application using AngularJS. The goal is to have a single-page application which allows us to select a screencast link on the left and view it on the right. An example of this would be found at <a href="http://ember101.com">http://ember101.com</a>.</p>

<h6>The title of the article states that we will be using Rails 4 in our application. We will be, however it is not necessary. There are no parts of this tutorial which use code specific to Rails 4.</h6>

<div style="clear: both;"></div>


<h2>Creating the Rails Application</h2>

<p>I had a hard time deciding when I began this project on whether to use a full Rails application or a very lightweight ruby web stack like <a href="http://sinatrarb.com">Sinatra</a>. In a <a href="http://railscasts.com/episodes/348-the-rails-api-gem">Railscast</a> by Ryan Bates, he describes an excellent middle-ground solution called <a href="https://github.com/rails-api/rails-api">Rails-Api</a>. By using the rails-api gem, we can make our Rails app much more lightweight and consequently faster than a normal Rails application.</p>

<p>Before anything, we need to install the <em>rails-api</em> gem in order for us to create our app.</p>

<pre><code>$ gem install rails-api
</code></pre>

<p>Once that is installed, lets create a new Rails application called <em>Angular Casts</em></p>

<pre><code>$ rails-api new angular_casts
</code></pre>

<p>For those familiar with Rails, you will notice that a lot of the auto-generated code has been removed. No helpers, views or even the asset pipeline are there. Being someone who loves CoffeeScript, I want to add the asset pipeline back into our app. With the rails-api gem, the asset pipeline support hasn't been removed, just hidden. To re-enable this to use CoffeeScript, you will need to re-create the pipeline directory <em>app/assets/javascripts</em>:</p>

<pre><code>$ mkdir -p app/assets/javascripts
</code></pre>

<p>and then create a <a href="http://coderberry.me/blog/2012/04/24/asset-pipeline-for-dummies/">manifest file</a> called <em>application.js</em>:</p>

<p><code>javascript app/assets/javascripts/application.js
//= require app
//= require_tree .
</code></p>

<h2>Create the Model</h2>

<p>Our application will be pretty simple. We are only going to worry about storing screencast information in our database. Rails by default comes with a very lightweight database server called SQLite. If you aren't familiar with this, you can visit <a href="http://guides.rubyonrails.org/getting_started.html#configuring-a-database">http://guides.rubyonrails.org/getting_started.html#configuring-a-database</a> to learn more.</p>

<p>Before we create our model, we need to determine what information we want to store. As a user of this application, I think the most useful would be:</p>

<ul>
<li><em>title</em>: What is the name of the screencast?</li>
<li><em>summary</em>: What is the screencast about?</li>
<li><em>duration</em>: How long is the screencast?</li>
<li><em>link</em>: How do I get to the original screencast?</li>
<li><em>published</em>: When was the screencast published?</li>
<li><em>source</em>: Who is the provider of the screencast?</li>
</ul>


<p>Let's create a model based on this information. We need to add the <em>video_url</em> field as well, which will be used to embed the video into our app.</p>

<pre><code>$ rails-api g model screencast title summary:text duration link published_at:datetime source video_url --timestamps=false
</code></pre>

<p>Note that in our generate command, we skipped timestamps. By having the published_at date and time, we don't need to store the additional information <em>unless you really really wanted to</em>.</p>

<p>Run the migration tasks for both development and test environments:</p>

<pre><code>$ rake db:migrate
$ rake db:migrate RAILS_ENV=test
</code></pre>

<h3>Testing the Model</h3>

<h6>Testing is not the primary topic of these blog posts, so less time and explanation will be given to them. If you want to learn more about testing, I recommend <a href="http://railscasts.com/episodes/275-how-i-test">http://railscasts.com/episodes/275-how-i-test</a>.</h6>

<p>For us to have a long-lasting, maintainable application it is imperative that we keep our code tested. This will also help us stay focused on what our application and code is supposed to do.</p>

<p>Start by running the rake task for testing to see make sure the tests run:</p>

<pre><code>$ rake test
</code></pre>

<p>If all worked well, you should see something like <strong>0 tests, 0 assertions, 0 failures, 0 errors, 0 skips</strong>. This means that the test suite ran, but it didn't find any tests to run.</p>

<p>There are a few things we will want to test. Let's list them out:</p>

<ol>
<li>Make sure that all the required data exists for each screencast.</li>
<li>Make sure that we do not have two of the same screencast (duplicates).</li>
</ol>


<p>Now that we have the list, we can write our tests. Let's first update our fixtures file with some useable data:</p>

<p>``` yaml test/fixtures/screencasts.yml</p>

<h1>Read about fixtures at http://api.rubyonrails.org/classes/ActiveRecord/Fixtures.html</h1>

<p>fast_rails_commands:
  title: "Fast Rails Commands"
  summary: "Rails commands, such as generators, migrations, and tests, have a tendency to be slow because they need to load the Rails app each time. Here I show three tools to make this faster: Zeus, Spring, and Commands."
  duration: "8:06"
  link: "http://railscasts.com/episodes/412-fast-rails-commands"
  published_at: "Thu, 04 Apr 2013 00:00:00 -0700"
  source: "railscasts"
  video_url: "http://media.railscasts.com/assets/episodes/videos/412-fast-rails-commands.mp4"</p>

<p>wizard_forms_with_wicked:
  title: "Wizard Forms with Wicked"
  summary: "Creating a wizard form can be tricky in Rails. Learn how Wicked can help by turning a controller into a series of multiple steps."
  duration: "11:57"
  link: "http://railscasts.com/episodes/346-wizard-forms-with-wicked"
  published_at: "Thu, 03 May 2012 00:00:00 -0700"
  source: "railscasts"
  video_url: "http://media.railscasts.com/assets/episodes/videos/346-wizard-forms-with-wicked.mp4"</p>

<p>sending_html_emails:
  title: "Sending HTML Email"
  summary: "HTML email can be difficult to code because any CSS should be made inline. Here I present a few tools for doing this including the premailer-rails3 and roadie gems."
  duration: "5:42"
  link: "http://railscasts.com/episodes/312-sending-html-email"
  published_at: "Mon, 02 Jan 2012 00:00:00 -0800"
  source: "railscasts"
  video_url: "http://media.railscasts.com/assets/episodes/videos/312-sending-html-email.mp4"
```</p>

<p>Open up the auto-generated file <em>test/models/screencast_test.rb</em> and add the following tests. If you are using Rails 3.x, the test file will appear under <em>test/unit/screencast_test.rb.</em></p>

<p>``` ruby test/models/screencast_test.rb
require 'test_helper'</p>

<p>class ScreencastTest &lt; ActiveSupport::TestCase
  setup do</p>

<pre><code>@screencast_defaults = {
  title:        'Facebook Authentication',
  summary:      'This will show how to create a new facebook application and configure it. Then add some authentication with the omniauth-facebook gem and top it off with a client-side authentication using the JavaScript SDK.',
  duration:     '12:09',
  link:         'http://railscasts.com/episodes/360-facebook-authentication',
  published_at: Date.parse('Mon, 25 Jun 2012 00:00:00 -0700'),
  source:       'railscasts',
  video_url:    'http://media.railscasts.com/assets/episodes/videos/360-facebook-authentication.mp4'
}
</code></pre>

<p>  end</p>

<p>  test "should be invalid if missing required data" do</p>

<pre><code>screencast = Screencast.new
assert !screencast.valid?
[:title, :summary, :duration, :link, :published_at, :source, :video_url].each do |field_name|
  assert screencast.errors.keys.include? field_name
end
</code></pre>

<p>  end</p>

<p>  test "should be valid if required data exists" do</p>

<pre><code>screencast = Screencast.new(@screencast_defaults)
assert screencast.valid?
</code></pre>

<p>  end</p>

<p>  test "should only allow one screencast with the same video url" do</p>

<pre><code>screencast = Screencast.new(@screencast_defaults)
screencast.video_url = screencasts(:fast_rails_commands).video_url
assert !screencast.valid?
assert screencast.errors[:video_url].include? "has already been taken"
</code></pre>

<p>  end
end
```</p>

<p>Once this is in place, run the tests again with the command <code>rake test</code>.</p>

<p>``` bash
$ rake test
Run options: --seed 16385</p>

<h1>Running tests:</h1>

<p>F.F</p>

<p>Finished tests in 0.040478s, 74.1143 tests/s, 74.1143 assertions/s.</p>

<p>  1) Failure:
ScreencastTest#test_should_be_invalid_if_missing_required_data [/Users/eberry/Desktop/angular_casts/test/models/screencast_test.rb:18]:
Failed assertion, no message given.</p>

<p>  2) Failure:
ScreencastTest#test_should_only_allow_one_screencast_with_the_same_video_url [/Users/eberry/Desktop/angular_casts/test/models/screencast_test.rb:32]:
Failed assertion, no message given.</p>

<p>3 tests, 3 assertions, 2 failures, 0 errors, 0 skips
Errors running test:units! #&lt;RuntimeError: Command failed with status (1): [ruby -I"lib:test" -I"/Users/eberry/.rvm/gems/ruby-1.9.3-p392/gems/rake-10.0.4/lib" "/Users/eberry/.rvm/gems/ruby-1.9.3-p392/gems/rake-10.0.4/lib/rake/rake_test_loader.rb" "test/{models,helpers,unit}/<em>*/</em>_test.rb" ]>
```</p>

<p>You can see we have have 3 tests with 3 assertions and 2 failures. The reason we didn't get 3 failures is because the second test, "should be valid if required data exists", will always pass until we set up some restrictions on the model.</p>

<p>Let's update the model to make these tests pass.</p>

<p><code>ruby app/models/screencast.rb
class Screencast &lt; ActiveRecord::Base
  validates_presence_of :title, :summary, :duration, :link, :published_at, :source, :video_url
  validates_uniqueness_of :video_url
end
</code></p>

<p>Run the tests again to see them pass successfully!</p>

<h2>Importing the Video Data</h2>

<p>Because we are going to import video feeds from external sites, we need to use a feed parsing library. The best one available is <a href="https://github.com/pauldix/feedzirra">feedzirra</a>. Go ahead and add it to the Gemfile and run <code>bundle install</code>.</p>

<pre><code>gem 'feedzirra'

$ bundle install
</code></pre>

<h3>Create an Import Library</h3>

<p>Now that we have a place to put all of the screencast information, we need to be able to import it from external feeds. Here we are going to create a simple Ruby class that uses the <em>feedzirra</em> gem to grab the feed data, parse it and then add it to our database.</p>

<p>Let's start off by creating a new class called <em>ScreencastImporter</em>. Paste the following code into <em>lib/screencast_importer.rb</em>.</p>

<p>``` ruby lib/screencast_importer.rb
require 'feedzirra'</p>

<p>class ScreencastImporter
  def self.import_railscasts</p>

<pre><code># because the Railscasts feed is targeted at itunes, there is additional metadata that
# is not collected by Feedzirra by default. By using add_common_feed_entry_element,
# we can let Feedzirra know how to map those values. See more information at
# http://www.ruby-doc.org/gems/docs/f/feedzirra-0.1.2/Feedzirra/Feed.html
Feedzirra::Feed.add_common_feed_entry_element(:enclosure, :value =&gt; :url, :as =&gt; :video_url)
Feedzirra::Feed.add_common_feed_entry_element('itunes:duration', :as =&gt; :duration)

# Capture the feed and iterate over each entry
feed = Feedzirra::Feed.fetch_and_parse("http://feeds.feedburner.com/railscasts")
feed.entries.each do |entry|

  # Strip out the episode number from the title
  title = entry.title.gsub(/^#\d{1,}\s/, '')

  # Find or create the screencast data into our database
  Screencast.where(video_url: entry.video_url).first_or_create(
    title:        title,
    summary:      entry.summary,
    duration:     entry.duration,
    link:         entry.url,
    published_at: entry.published,
    source:       'railscasts' # set this manually
  )
end

# Return the number of total screencasts for the source
Screencast.where(source: 'railscasts').count
</code></pre>

<p>  end
end
```</p>

<p>Note that on lines 17-18, we strip out the episode number from the Railscast title. So "#412 Fast Rails Commands" would become "Fast Rails Commands". See <a href="http://rubular.com/r/duWf3x2mSp">this Rubular</a> to see how I determined the RegExp pattern.</p>

<p>Now if we were to go into our Rails console, we could trigger this import manually. Give it a shot!</p>

<pre><code>$ rails c
Loading development environment (Rails 4.0.0.beta1)

&gt;&gt; require 'screencast_importer'
=&gt; true

&gt;&gt; ScreencastImporter.import_railscasts
.... lots ... of ... feedback ....
=&gt; 344

&gt;&gt; Screencast.count
=&gt; 344
</code></pre>

<h6>At the time of writing this article, there were 344 public Railscasts. This number will increase as time goes on.</h6>

<h3>Trigger Import via Rake</h3>

<p>Instead of loading up the Rails console and performing the import manually, it would me much easier to have a simple command that we could run to perform the imports. This is where <a href="http://rake.rubyforge.org/">rake tasks</a> come in. Let's create a rake task that will perform the import.</p>

<p>``` ruby lib/tasks/screencast_sync.rake
require 'screencast_importer'</p>

<p>namespace :screencast_sync do
  desc 'sync all missing screencasts from Railscasts.com'
  task :railscasts => :environment do</p>

<pre><code>total = ScreencastImporter.import_railscasts
puts "There are now #{total} screencasts from Railscasts.com"
</code></pre>

<p>  end
end
```</p>

<p>Now that we have our rake task set up, go ahead and run the command:</p>

<pre><code>$ rake screencast_sync:railscasts
There are now 344 screencasts from Railscasts.com
</code></pre>

<p>It worked! But no time to celebrate.. let's move on.</p>

<h2>Making Episodes Accessible via API</h2>

<p>Because we are planning on using AngularJS for our front-end, we only need to expose our data as JSON. This will allow AngularJS to talk to the backend via ajax calls.</p>

<p>We are going to only use two calls to the API:</p>

<ul>
<li><strong>/screencasts.json</strong> - returns a full list of episodes</li>
<li><strong>/screencasts/ID.json</strong> - returns data for a specified screencast (where ID is the unique ID of the screencast in our db)</li>
</ul>


<p>Let's start by creating the controller. Run the following generator:</p>

<pre><code>$ rails-api g controller screencasts index show
</code></pre>

<p>By running this generator, the controller <code>ScreencastsController</code> was created. The routes file was also updated. Let's do some cleanup to the routes and make sure we only are allowing what we want to use. On top of that, let's <a href="http://guides.rubyonrails.org/routing.html#controller-namespaces-and-routing">scope</a> our calls to the API with <em>api</em>.</p>

<p>``` ruby config/routes.rb
AngularCasts::Application.routes.draw do
  scope :api do</p>

<pre><code>get "/screencasts(.:format)" =&gt; "screencasts#index"
get "/screencasts/:id(.:format)" =&gt; "screencasts#show"
</code></pre>

<p>  end
end
```</p>

<p>Now update the controller to render the correct JSON data for the two URL's.</p>

<p>``` ruby app/controllers/screencast_controller.rb
class ScreencastsController &lt; ApplicationController
  # GET /screencasts
  # GET /screencasts.json
  def index</p>

<pre><code>render json: Screencast.all
</code></pre>

<p>  end</p>

<p>  # GET /screencasts/:id
  # GET /screencasts/:id.json
  def show</p>

<pre><code>render json: Screencast.find(params[:id])
</code></pre>

<p>  end
end
```</p>

<p>One final thing that we need to do is tell Rails to not include the root in the JSON response. What this means is that the JSON response will not have a labelling key (e.g. <code>"screencast" =&gt; { "id": 1, ...</code>). To make this modification, add the following to your application controller:</p>

<p><code>ruby app/controllers/application_controller.rb
class ApplicationController &lt; ActionController::API
  ActiveRecord::Base.include_root_in_json = false
end
</code></p>

<p>Cool. If you are feeling brave, start up your Rails application and visit this link: <a href="http://localhost:3000/api/screencasts.json">http://localhost:3000/api/screencasts.json</a>. If all went well, you should see JSON data. You should also be able to view <a href="http://localhost:3000/api/screencasts/1.json">http://localhost:3000/api/screencasts/1.json</a> and see the data belonging to a single screencast.</p>

<p>Example:</p>

<p><code>javascript http://localhost:3000/api/screencasts/1.json
{
  "id": 1,
  "title": "Fast Rails Commands",
  "summary": "Rails commands, such as generators, migrations, and tests, have a tendency to be slow because they need to load the Rails app each time. Here I show three tools to make this faster: Zeus, Spring, and Commands.",
  "duration": "8:06",
  "link": "http://railscasts.com/episodes/412-fast-rails-commands",
  "published_at": "2013-04-04T07:00:00.000Z",
  "source": "railscasts",
  "video_url": "http://media.railscasts.com/assets/episodes/videos/412-fast-rails-commands.mp4"
}
</code></p>

<h3>Testing the API</h3>

<p>Of course we are going to test the API! It actually isn't as complicated as it may seem. I am not going to go over much explanation beyond the inline comments.</p>

<p>Because we have scoped our route with "/api", our auto-generated controller test does not work. This is not a bad thing. Delete it! We will not be performing a <em>controller</em> test. We are interested on the <em>API</em> side of things.</p>

<pre><code>$ rm test/controllers/screencasts_controller_test.rb
</code></pre>

<p>Now create a new integration test at <em>test/integration/api_screencasts_test.rb</em>.</p>

<p>``` ruby test/integration/api_screencasts_test.rb
require 'test_helper'</p>

<p>class ApiScreencastsTest &lt; ActionDispatch::IntegrationTest
  test "get /api/screencasts.json" do</p>

<pre><code>get "/api/screencasts.json"
assert_response :success
assert body == Screencast.all.to_json
screencasts = JSON.parse(response.body)
assert screencasts.size == 3 # because there are three fixtures (see screencasts.yml)
assert screencasts.any? { |s| s["title"] == screencasts(:fast_rails_commands).title }
</code></pre>

<p>  end</p>

<p>  test "get /api/screencasts/:id" do</p>

<pre><code>screencast = screencasts(:fast_rails_commands)
get "/api/screencasts/#{screencast.id}.json"
assert_response :success
assert body == screencast.to_json
assert JSON.parse(response.body)["title"] == screencast.title
</code></pre>

<p>  end
end
```</p>

<p>Go ahead and run your tests:</p>

<pre><code>$ rake test
...
3 tests, 11 assertions, 0 failures, 0 errors, 0 skips
...
2 tests, 7 assertions, 0 failures, 0 errors, 0 skips
</code></pre>

<p>Looks like our test are passing.</p>

<p>If you are using Rails 4, you may be getting a <strong>DEPRECATION WARNING</strong> when running the test. To resolve this, open the file <em>config/initializers/secret_token.rb</em> and make the change:</p>

<p>``` ruby secret_token.rb</p>

<h1>change the attribute 'secret_token' to 'secret_key_base'</h1>

<p>AngularCasts::Application.config.secret_key_base = '....' # &lt;- your token is here
```</p>

<hr />

<p>Let's stop for now. Our next steps will be getting our hands dirty with AngularJS.</p>

<h3>Go to <a href="/blog/2013/04/23/angularjs-on-rails-4-part-2/">Part 2</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple fix for pagination with Twitter Bootstrap]]></title>
    <link href="http://coderberry.me/blog/2012/10/09/simple-fix-for-pagination-with-twitter-bootstrap/"/>
    <updated>2012-10-09T16:40:00-06:00</updated>
    <id>http://coderberry.me/blog/2012/10/09/simple-fix-for-pagination-with-twitter-bootstrap</id>
    <content type="html"><![CDATA[<p>As a Rails guy, I always perform my table pagination using mislav's <a href="https://github.com/mislav/will_paginate">will_paginate</a> gem. However, when I use it combined with Twitter Bootstrap, I get an undesired result:</p>

<p><img src="/images/posts/pagination-bad.png"></p>

<p>There is a very simple fix for this which doesn't require using an <a href="https://github.com/yrgoldteeth/bootstrap-will_paginate">additional gem</a>.</p>

<p>Add the following CSS to your application:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>assets/stylesheets/pagination_fix.css </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">pre</span><span class="o">&gt;&lt;</span><span class="nt">code</span><span class="o">&gt;//</span><span class="nt">-------------------------------------------------------------------------------</span>
</span><span class='line'><span class="o">//</span>   <span class="nt">Pagination</span> <span class="nt">fix</span> <span class="nt">for</span> <span class="nt">will_paginate</span> <span class="nt">and</span> <span class="nt">bootstrap</span>
</span><span class='line'><span class="o">//</span><span class="nt">-------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.pagination</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">span</span><span class="o">.</span><span class="n">disabled</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#aaa</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nt">em</span><span class="nc">.current</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">0</span> <span class="m">14px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">line-height</span><span class="o">:</span> <span class="m">38px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">text-decoration</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#DDD</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border-left-width</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nc">.previous_page</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">border-left</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#ddd</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nt">code</span><span class="o">&gt;&lt;/</span><span class="nt">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Refresh your page and the pagination issues should be resolved:</p>

<p><img src="/images/posts/pagination-good.png"></p>

<p>Hope this helps!</p>

<h4>Update (Dec 4, 2012):</h4>

<p>I recently attempted to use the will_paginate gem with the latest version of Bootstrap (v2.2.1) and the pagination no longer
rendered using the <code>&lt;li&gt;..&lt;/li&gt;</code> elements. To fix this I added the following into an initializer:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>config/initializers/will_paginate.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="no">WillPaginate</span><span class="p">)</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">WillPaginate</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;module ActionView</span>
</span><span class='line'><span class="sr">  def will_paginate(collection = nil, options = {})</span>
</span><span class='line'><span class="sr">    options[:renderer] ||= BootstrapLinkRenderer</span>
</span><span class='line'><span class="sr">    super.try :html_safe</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  class BootstrapLinkRenderer &amp;lt; LinkRenderer</span>
</span><span class='line'><span class="sr">    protected</span>
</span><span class='line'>
</span><span class='line'><span class="sr">    def html_container(html)</span>
</span><span class='line'><span class="sr">      tag :div, tag(:ul, html), container_attributes</span>
</span><span class='line'><span class="sr">    end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">    def page_number(page)</span>
</span><span class='line'><span class="sr">      tag :li, link(page, page, :rel =&amp;gt; rel_value(page)), :class =&amp;gt; (&#39;active&#39; if page == current_page)</span>
</span><span class='line'><span class="sr">    end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">    def previous_or_next_page(page, text, classname)</span>
</span><span class='line'><span class="sr">      tag :li, link(text, page || &#39;#&#39;), :class =&amp;gt; [classname[0..3], classname, (&#39;disabled&#39; unless page)].join(&#39; &#39;)</span>
</span><span class='line'><span class="sr">    end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">    def gap</span>
</span><span class='line'><span class="sr">      tag :li, link(super, &#39;#&#39;), :class =&amp;gt; &#39;disabled&#39;</span>
</span><span class='line'><span class="sr">    end</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This tip was provided by <a href="https://github.com/houen">Søren Houen</a> and found on the <a href="http://railscasts.com/episodes/329-more-on-twitter-bootstrap?view=comments">Railscasts comments</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asset Pipeline for Dummies]]></title>
    <link href="http://coderberry.me/blog/2012/04/24/asset-pipeline-for-dummies/"/>
    <updated>2012-04-24T08:41:00-06:00</updated>
    <id>http://coderberry.me/blog/2012/04/24/asset-pipeline-for-dummies</id>
    <content type="html"><![CDATA[<p>The Rails asset pipeline is very powerful, but often misunderstood. At the <a href="http://utruby.org">Utah Ruby User Group</a>, most of the attendees aren't sure how to use it fully in their Rails app. It's considered as one of the <em>magic</em> features that Rails offers. I admit that I was confused as well and took it's magic for granted. Not any longer.</p>

<p>I reference the word <em>asset</em> a lot in this article. An asset is a file that is to be included in your Rails application (JavaScript, CSS, Image, etc).</p>

<p><strong>In this article, I want to simplify the asset pipeline so it is better understood.</strong></p>

<h2>Purpose</h2>

<p>The asset pipeline has three goals: precompile, concatenate and minify assets into one central path. Or in other words, it takes all of your stylesheets, javascript files, images and any other files you want, joins them together when possible, and places them in the public/assets folder.</p>

<h2>Moving Parts</h2>

<p><img src="http://coderberry.me/images/posts/sprockets.png" class="fleft" align="top" />
The asset pipeline is powered by two technologies: <a href="https://github.com/sstephenson/sprockets">Sprockets</a> and <a href="https://github.com/rtomayko/tilt">Tilt</a>, the latter being a dependency of the former (look at your <code>Gemfile.lock</code> if you don't believe me).</p>

<p><strong>Sprockets</strong> performs the asset packaging which takes the assets from all the specified paths, compiles them together and places them in the target path (public/assets).</p>

<p><strong>Tilt</strong> is the template engine that Sprockets uses. This allows file types like <em>scss</em> and <em>erb</em> to be used in the asset pipeline. See the <a href="https://github.com/rtomayko/tilt/blob/master/README.md">Tilt Readme</a> for a list of supported template engines.</p>

<p><img src="/images/posts/asset_pipeline_flow.png"></p>

<h2>Asset Paths</h2>

<p>Rails applications default to having three possible asset paths.</p>

<p><code>app/assets</code> is for assets that are owned by the application, such as custom images, JavaScript files or stylesheets.</p>

<p><code>lib/assets</code> is for your own libraries’ code that doesn’t really fit into the scope of the application or those libraries which are shared across applications.</p>

<p><code>vendor/assets</code> is for assets that are owned by outside entities, such as code for JavaScript plugins and CSS frameworks.</p>

<h2>The Manifest</h2>

<p>The keystone of the asset pipeline is the manifest file. By default, Rails creates one for stylesheets (<code>app/assets/stylesheets/application.css</code>) and JavaScript files (<code>app/assets/javascripts/application.js</code>). This file uses <em>directives</em> to declare dependencies in asset source files.</p>

<p>For directives that take a path argument, you may specify either a logical path or a relative path. Relative paths begin with ./ and reference files relative to the location of the current file.</p>

<p>Here are some <em>directives</em> that can be used:</p>

<ul>
<li><code>require</code> <em>[path]</em> inserts the contents of the asset source file specified by path. If the file is required multiple times, it will appear in the bundle only once.</li>
<li><code>include</code> <em>[path]</em> works like require, but inserts the contents of the specified source file even if it has already been included or required.
<code>require_directory</code> <em>[path]</em> requires all source files of the same format in the directory specified by path. Files are required in alphabetical order.</li>
<li><code>require_tree</code> <em>[path]</em> works like require_directory, but operates recursively to require all files in all subdirectories of the directory specified by path.</li>
<li><code>require_self</code> tells Sprockets to insert the body of the current source file before any subsequent require or include directives.</li>
<li><code>depend_on</code> <em>[path]</em> declares a dependency on the given path without including it in the bundle. This is useful when you need to expire an asset's cache in response to a change in another file.</li>
<li><code>stub</code> <em>[path]</em> allows dependency to be excluded from the asset bundle. The path must be a valid asset and may or may not already be part of the bundle. Once stubbed, it is blacklisted and can't be brought back by any other require.</li>
</ul>


<p>Documentation for this section was largely extracted from the <a href="https://github.com/sstephenson/sprockets">Sprockets</a> README.</p>

<h2>Usage</h2>

<p>Using the asset pipeline is very simple. All it involves is placing assets (js/css/images/other) into the asset path. You can access the files using multiple helper methods within your views:</p>

<p><code>ruby
audio_path("horse.wav")   # =&gt; /audios/horse.wav
audio_tag("sound")        # =&gt; &lt;audio src="http://coderberry.me/audios/sound" /&gt;
font_path("font.ttf")     # =&gt; /fonts/font.ttf
image_path("edit.png")    # =&gt; "/images/edit.png"
image_tag("icon.png")     # =&gt; &lt;img src="http://coderberry.me/images/icon.png" alt="Icon" /&gt;
video_path("hd.avi")      # =&gt; /videos/hd.avi
video_tag("trailer.ogg")  # =&gt; &lt;video src="http://coderberry.me/videos/trailer.ogg" /&gt;
</code></p>

<p>See <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/AssetTagHelper.html">ActionView::Helpers::AssetTagHelper</a> documentation for more information.</p>

<h2>Misconceptions</h2>

<h4>Files must belong in their respective paths. For example, all JavaScript files must be in a <code>javascripts</code> folder within an asset path.</h4>

<p>The truth is that the paths (<em>stylesheets</em>, <em>javascripts</em>, <em>images</em>) are only there for organization. You can have all the assets in a single folder or in a hundred.</p>

<h4><a href="http://sass-lang.com/">Sass</a> files need to use <em>erb</em> extension to allow for asset path inclusions within the files.</h4>

<p>The truth is that <code>sass-rails</code> provides <code>-url</code> and <code>-path</code> helpers for the following asset types: image, font, video, audio, JavaScript and stylesheet.</p>

<p><code>ruby
image-url("rails.png")         # becomes url(/assets/rails.png)
image-path("rails.png")        # becomes "/assets/rails.png".
asset-url("rails.png", image)  # becomes url(/assets/rails.png)
asset-path("rails.png", image) # becomes "/assets/rails.png"
</code></p>

<p>See the <a href="http://guides.rubyonrails.org/asset_pipeline.html#coding-links-to-assets">Rails Asset Pipeline</a> guide (2.2.2) for more information.</p>

<h2>Adding to Gems</h2>

<p>A good way to include assets easily in a Rails application is by using gems. To include assets within a gem to be precompiled with the Rails application that is using it, all you need is to place the assets in one of the three standard asset paths: <code>app/assets</code>, <code>lib/assets</code> and <code>vendor/assets</code>. These will be automatically included in by Sprockets when the assets are compiled. See the <a href="http://guides.rubyonrails.org/asset_pipeline.html#adding-assets-to-your-gems">Rails documentation</a> for more information.</p>

<h2>FAQ</h2>

<h4>Q: Why doesn't the auto-generated scss and coffeescript only get included in their respective controller views?</h4>

<p>Because the assets all concatenate into one file, there are no seperate files to be included on a view-by-view basis. There is a way to get around this by using css classes.</p>

<p>Let's say we have a controller named <code>Users</code> with an accompanying sass file called <code>users.css.scss</code>. Make sure your css is wrapped in a class which includes the name of the controller:</p>

<p><code>css
body-users {
  // Custom css goes here
}
</code></p>

<p>Next, add a class to the body tag of your layout:</p>

<p><code>html
&lt;body class="body-#{controller_name}"&gt;
</code></p>

<p>Now the css in <code>users.css.scss</code> will only be applied to views under the <code>Users</code> controller.</p>

<h4>Q: Do I have to use the asset pipeline?</h4>

<p>No. In Rails 3.1, the asset pipeline is enabled by default. It can be disabled in <code>config/application.rb</code> by putting this line inside the application class definition:</p>

<p><code>ruby
config.assets.enabled = false
</code></p>

<h4>Q: What happens if there are duplicate file names in different asset folders?</h4>

<p>Let's say you have two asset files with the same name in different paths. For example, let's say we have two files: <code>app/assets/stylesheets/style.css.scss</code> and <code>vendor/assets/stylesheets/style.css.scss</code>.</p>

<p>When the assets are compiled, it disregards all the duplicate files after the first one found in the asset path. Let's look at the asset path using the <em>rails console</em>:</p>

<p>```bash</p>

<blockquote><blockquote><h2>y Rails.application.config.assets.paths</h2>

<ul>
<li>/Users/eberry/example/app/assets/images</li>
<li>/Users/eberry/example/app/assets/javascripts</li>
<li>/Users/eberry/example/app/assets/stylesheets</li>
<li>/Users/eberry/example/vendor/assets/javascripts</li>
<li>/Users/eberry/example/vendor/assets/stylesheets</li>
<li>/Users/eberry/.rvm/gems/ruby-1.9.2-p290/gems/jquery-rails-2.0.2/vendor/assets/javascripts</li>
<li>/Users/eberry/.rvm/gems/ruby-1.9.2-p290/gems/coffee-rails-3.2.2/lib/assets/javascripts
```</li>
</ul>
</blockquote></blockquote>

<p>Note that the path <code>/Users/eberry/example/app/assets/stylesheets</code> appears before the path <code>/Users/eberry/example/vendor/assets/stylesheets</code>.</p>

<h4>Q: How can I precompile assets that aren't to be used in the pipeline?</h4>

<p>Let's say you want to include the folder <code>other/assets</code> into the asset pipeline to be precompiled. This is a simple addition in the <code>application.rb</code> file (or environment specific config file).</p>

<p>```ruby
module Foo
  class Application &lt; Rails::Application</p>

<pre><code>...
# Add additional path to the assets path for pipeline compilation
config.assets.paths &lt;&lt; "#{Rails.root}/other/assets"
</code></pre>

<p>  end
end
```</p>

<p>Now when you run the command <code>Rails.application.config.assets.paths</code> in the Rails console, you will see the new asset path.</p>

<h4>Q: How can I have certain JavaScript files appear at the bottom of the HTML page?</h4>

<p>Multiple manifests can be created in the assets folder. For example, I can have a separate manifest called <code>footer.js</code> which includes the files <code>footer_1.js</code> and <code>footer_2.js</code>.</p>

<p><code>javascript
//= require footer_1
//= require footer_2
</code></p>

<p>I can add this into the HTML by using the same <code>javascript_include_tag</code> that is used in the HTML header of the layout.</p>

<p>```html</p>

<pre><code>&lt;%= javascript_include_tag("footer") %&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<h4>Q: How can I precompile additional assets without having to include them in the manifest?</h4>

<p>Let's say we have a file called <code>search.js</code> in our <code>app/assets/javascripts</code> directory and we don't include it in the manifest. We still would like it to be compiled and placed into the <code>public/assets</code> when the assets are compiled.</p>

<p>This is very simple. Just add the following to your <code>application.rb</code> file (or environment specific config file):</p>

<p>```ruby</p>

<h1>Precompile additional assets (application.js,</h1>

<h1>application.css, and all non-JS/CSS are already added)</h1>

<p>config.assets.precompile += %w( search.js )
```</p>

<p>This configuration option appears by default in <code>config/environments/production.rb</code>.</p>

<h2>Summary</h2>

<p>As I said before, the asset pipeline has three goals: <em><em>precompile</em>, </em>concatenate<em> and </em>minify* assets.</p>

<p><strong>Precompilation</strong> let's you use higher-level languages to create actual assets (for example, Sass to CSS).</p>

<p><strong>Concatenation</strong> is very important in the production environment. It can reduce the number of requests that a browser makes to render a web page, which leads to faster load time.</p>

<p><strong>Minification</strong> takes out the extra whitespace and comments from your assets. This allows for smaller asset file size, which leads to faster load times.</p>

<p>I strongly suggest learning more about the asset pipeline by going to the <a href="http://guides.rubyonrails.org/asset_pipeline.html">Rails documentation</a>. Ryan Bates also two excellent Railscasts on <a href="http://railscasts.com/episodes/279-understanding-the-asset-pipeline">Understanding the Asset Pipeline</a> and <a href="http://railscasts.com/episodes/341-asset-pipeline-in-production">Asset Pipeline in Production</a>.</p>

<p>Feel free to hop on the #urug channel on Freenode to chat with me anytime. Also, for a different perspective on asset handling, see the <a href="http://grails-plugins.github.com/grails-resources/">Resources</a> plugin for <a href="http://grails.org">Grails</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using multiple SMTP accounts with Rails &amp; ActionMailer]]></title>
    <link href="http://coderberry.me/blog/2009/03/30/using-multiple-smtp-accounts-with-rails-and-actionmailer/"/>
    <updated>2009-03-30T00:00:00-06:00</updated>
    <id>http://coderberry.me/blog/2009/03/30/using-multiple-smtp-accounts-with-rails-and-actionmailer</id>
    <content type="html"><![CDATA[<p>Recently I ran into a problem where I needed to be able to send emails via two different SMTP accounts within the same Rails application. I scoured the net trying to find a method to do this, but I couldn't find one. So I pulled out my hack-hat and got started.</p>

<p>If there are any better ways to do this, I would love to hear about it.</p>

<p>I first created a new YAML file in my config folder called <code>action_mailer.yml</code>. In this file, I specified three different nodes with the actionmailer settings.</p>

<p>```yaml
development:
  ...</p>

<p>test:
  ...</p>

<p>production:
  website1:</p>

<pre><code>domain: "gary@superfriends.com"
user_name: gary
password: superduper
address: smtp.gmail.com
port: 587
authentication: :plain
</code></pre>

<p>  website2:</p>

<pre><code>domain: mysupercooldomain.com
user_name: ABCDEF
password: blahblah
address: mail.authsmtp.com
port: 25
authentication: :plain
</code></pre>

<p>```</p>

<p>Afterwards, I created two mailer models that represent each of the different mailers I will use.</p>

<p>```ruby</p>

<h1>app/models/mailer1.rb</h1>

<p>class Website1 &lt; ActionMailer::Base
  def load_settings</p>

<pre><code>options = YAML.load_file("#{RAILS_ROOT}/config/action_mailer.yml")[RAILS_ENV]["website1"]
@@smtp_settings = {
  :address              =&gt; options["address"],
  :port                 =&gt; options["port"],
  :domain               =&gt; options["domain"],
  :authentication       =&gt; options["authentication"],
  :user_name            =&gt; options["user_name"],
  :password             =&gt; options["password"]
}
</code></pre>

<p>  end</p>

<p>  def welcome_email(recipient, sent_at = Time.now)</p>

<pre><code>load_settings
@subject = 'Thank you for visiting website 1'
@recipients = RAILS_ENV == "production" ? recipient : "cavneb@gmail.com"
@from = 'gary@superfriends.com'
@sent_on = sent_at
</code></pre>

<p>  end
end
```</p>

<p>```ruby</p>

<h1>app/models/mailer2.rb</h1>

<p>class Website2 &lt; ActionMailer::Base
  def load_settings</p>

<pre><code>options = YAML.load_file("#{RAILS_ROOT}/config/action_mailer.yml")[RAILS_ENV]["website2"]
@@smtp_settings = {
  :address              =&gt; options["address"],
  :port                 =&gt; options["port"],
  :domain               =&gt; options["domain"],
  :authentication       =&gt; options["authentication"],
  :user_name            =&gt; options["user_name"],
  :password             =&gt; options["password"]
}
</code></pre>

<p>  end</p>

<p>  def welcome_email(recipient, sent_at = Time.now)</p>

<pre><code>load_settings
@subject = 'Thank you for visiting website 2'
@recipients = RAILS_ENV == "production" ? recipient : "cavneb@gmail.com"
@from = 'info@mysupercooldomain.com'
@sent_on = sent_at
</code></pre>

<p>  end
end
```</p>

<p>So now when I send an email, I can first determine which mailer to use and then send the email.</p>

<p>For example, your controller might have code that looks like this:</p>

<p>```ruby</p>

<h1>Found in code of controller</h1>

<p>if session[:template_name] == "website1"
  Website1.deliver_welcome_email("cavneb@gmail.com")
else
  Website2.deliver_welcome_email("cavneb@gmail.com")
end
```</p>

<p>I realize this is probably the hard way, but hey, it's a start. Please post any plugins or alternatives to doing this if you know of any.</p>
]]></content>
  </entry>
  
</feed>
